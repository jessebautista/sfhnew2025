---
import Base from '../layouts/Base.astro';
---

<Base
  title="Contact - Sing for Hope"
  description="Get in touch with Sing for Hope. Whether you're interested in our programs, partnerships, or volunteering, we'd love to hear from you."
>
  <div class="bg-white">
    <!-- Hero Section -->
    <div class="bg-gray-50">
      <div class="max-w-7xl mx-auto py-16 px-4 sm:py-24 sm:px-6 lg:px-8">
        <div class="text-center">
          <h1 class="text-4xl font-extrabold text-gray-900 sm:text-5xl">
            Get in Touch
          </h1>
          <p class="mt-4 text-xl text-gray-500 max-w-3xl mx-auto">
            We'd love to hear from you. Whether you're interested in our programs, partnerships, volunteering, or have questions, reach out to us.
          </p>
        </div>
      </div>
    </div>

    <div class="max-w-7xl mx-auto py-16 px-4 sm:px-6 lg:px-8">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-16">
        <!-- Contact Interface -->
        <div>
          <h2 class="text-2xl font-bold text-gray-900 mb-6">Get in Touch</h2>
          
          <!-- Enhanced Form/Chat Toggle with Animation -->
          <div class="flex items-center justify-center mb-8">
            <div class="relative bg-gradient-to-r from-gray-50 to-gray-100 p-1 rounded-xl shadow-inner border border-gray-200/50" role="tablist" aria-label="Contact method">
              <!-- Animated Background Slider -->
              <div 
                id="tab-slider" 
                class="absolute top-1 left-1 h-10 bg-white rounded-lg shadow-md transition-all duration-300 ease-in-out border border-gray-200/50"
                style="width: calc(50% - 4px); transform: translateX(0);"
              ></div>
              
              <div class="relative z-10 flex">
                <button
                  id="form-tab"
                  role="tab"
                  aria-selected="true"
                  aria-controls="form-panel"
                  class="px-6 py-2 rounded-lg text-sm font-medium transition-all duration-300 text-harmony flex items-center space-x-2 min-w-[100px] justify-center"
                  onclick="switchToMode('form')"
                >
                  <svg class="w-4 h-4 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  <span>Form</span>
                </button>
                <button
                  id="chat-tab"
                  role="tab"
                  aria-selected="false"
                  aria-controls="chat-panel"
                  class="px-6 py-2 rounded-lg text-sm font-medium transition-all duration-300 text-gray-500 hover:text-gray-700 flex items-center space-x-2 min-w-[100px] justify-center"
                  onclick="switchToMode('chat')"
                >
                  <svg class="w-4 h-4 transition-all duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                  </svg>
                  <span>Chat</span>
                </button>
              </div>
            </div>
          </div>

          <!-- Toast Container -->
          <div id="toast-container" class="mb-6 hidden">
            <div id="toast-message" class="p-4 rounded-lg border" role="alert" aria-live="polite">
              <div class="flex items-center">
                <div id="toast-icon" class="flex-shrink-0"></div>
                <div class="ml-3">
                  <p id="toast-text" class="text-sm font-medium"></p>
                  <p id="toast-subtext" class="text-sm opacity-75"></p>
                </div>
              </div>
            </div>
          </div>

          <!-- Form Panel with Smooth Animation -->
          <div id="form-panel" role="tabpanel" aria-labelledby="form-tab" class="transition-all duration-500 ease-in-out">
            <form class="space-y-6" id="contact-form" novalidate>
            <!-- Intent Type Selector -->
            <div>
              <label for="intent-type" class="block text-sm font-medium text-gray-700 mb-2">
                How can we help you? *
              </label>
              <select
                id="intent-type"
                name="intentType"
                required
                class="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-harmony focus:border-harmony sm:text-sm py-3 px-4"
                aria-describedby="intent-error"
              >
                <option value="">Select your inquiry type</option>
                <option value="press">Press & Media Inquiry</option>
                <option value="volunteer">Volunteer Opportunities</option>
                <option value="donor">Donations & Giving</option>
                <option value="general">General Inquiry</option>
              </select>
              <div id="intent-error" class="mt-1 text-sm text-red-600 hidden" role="alert"></div>
            </div>

            <!-- Basic Information -->
            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
              <div>
                <label for="first-name" class="block text-sm font-medium text-gray-700 mb-2">
                  First name *
                </label>
                <input
                  type="text"
                  id="first-name"
                  name="firstName"
                  required
                  class="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-harmony focus:border-harmony sm:text-sm py-3 px-4"
                  aria-describedby="firstName-error"
                />
                <div id="firstName-error" class="mt-1 text-sm text-red-600 hidden" role="alert"></div>
              </div>
              
              <div>
                <label for="last-name" class="block text-sm font-medium text-gray-700 mb-2">
                  Last name *
                </label>
                <input
                  type="text"
                  id="last-name"
                  name="lastName"
                  required
                  class="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-harmony focus:border-harmony sm:text-sm py-3 px-4"
                  aria-describedby="lastName-error"
                />
                <div id="lastName-error" class="mt-1 text-sm text-red-600 hidden" role="alert"></div>
              </div>
            </div>

            <div>
              <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
                Email *
              </label>
              <input
                type="email"
                id="email"
                name="email"
                required
                class="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-harmony focus:border-harmony sm:text-sm py-3 px-4"
                aria-describedby="email-error"
              />
              <div id="email-error" class="mt-1 text-sm text-red-600 hidden" role="alert"></div>
            </div>

            <!-- Dynamic Fields based on Intent Type -->
            
            <!-- Press-specific fields -->
            <div id="press-fields" class="space-y-6 hidden">
              <div>
                <label for="publication" class="block text-sm font-medium text-gray-700 mb-2">
                  Publication/Organization *
                </label>
                <input
                  type="text"
                  id="publication"
                  name="organization"
                  class="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-harmony focus:border-harmony sm:text-sm py-3 px-4"
                  placeholder="e.g., The New York Times, ABC News"
                />
              </div>
              <div>
                <label for="press-phone" class="block text-sm font-medium text-gray-700 mb-2">
                  Phone Number *
                </label>
                <input
                  type="tel"
                  id="press-phone"
                  name="phoneNumber"
                  class="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-harmony focus:border-harmony sm:text-sm py-3 px-4"
                  placeholder="For urgent press inquiries"
                />
              </div>
              <div>
                <label for="deadline" class="block text-sm font-medium text-gray-700 mb-2">
                  Deadline
                </label>
                <input
                  type="date"
                  id="deadline"
                  name="deadline"
                  class="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-harmony focus:border-harmony sm:text-sm py-3 px-4"
                />
              </div>
            </div>

            <!-- Volunteer-specific fields -->
            <div id="volunteer-fields" class="space-y-6 hidden">
              <div>
                <label for="volunteer-type" class="block text-sm font-medium text-gray-700 mb-2">
                  What type of volunteer work interests you?
                </label>
                <select
                  id="volunteer-type"
                  name="volunteerType"
                  class="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-harmony focus:border-harmony sm:text-sm py-3 px-4"
                >
                  <option value="">Select volunteer opportunity</option>
                  <option value="piano-painting">Piano Painting & Setup</option>
                  <option value="events">Event Support</option>
                  <option value="education">Educational Programs</option>
                  <option value="admin">Administrative Support</option>
                  <option value="other">Other</option>
                </select>
              </div>
              <div>
                <label for="availability" class="block text-sm font-medium text-gray-700 mb-2">
                  Your availability
                </label>
                <textarea
                  id="availability"
                  name="availability"
                  rows="3"
                  class="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-harmony focus:border-harmony sm:text-sm py-3 px-4"
                  placeholder="e.g., Weekends, evenings, specific dates..."
                ></textarea>
              </div>
            </div>

            <!-- Donor-specific fields -->
            <div id="donor-fields" class="space-y-6 hidden">
              <div>
                <label for="donor-interest" class="block text-sm font-medium text-gray-700 mb-2">
                  What programs are you most interested in supporting?
                </label>
                <div class="space-y-2">
                  <label class="flex items-center">
                    <input type="checkbox" name="programs" value="pianos" class="h-4 w-4 text-harmony focus:ring-harmony border-gray-300 rounded">
                    <span class="ml-2 text-sm text-gray-700">Sing for Hope Pianos</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" name="programs" value="education" class="h-4 w-4 text-harmony focus:ring-harmony border-gray-300 rounded">
                    <span class="ml-2 text-sm text-gray-700">Education Programs</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" name="programs" value="health" class="h-4 w-4 text-harmony focus:ring-harmony border-gray-300 rounded">
                    <span class="ml-2 text-sm text-gray-700">Public Health & Wellness</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" name="programs" value="general" class="h-4 w-4 text-harmony focus:ring-harmony border-gray-300 rounded">
                    <span class="ml-2 text-sm text-gray-700">Where needed most</span>
                  </label>
                </div>
              </div>
            </div>

            <!-- General fields for all types -->
            <div>
              <label for="organization" class="block text-sm font-medium text-gray-700 mb-2">
                <span id="org-label">Organization</span>
              </label>
              <input
                type="text"
                id="organization"
                name="organization"
                class="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-harmony focus:border-harmony sm:text-sm py-3 px-4"
              />
            </div>

            <div>
              <label for="message" class="block text-sm font-medium text-gray-700 mb-2">
                <span id="message-label">Message *</span>
              </label>
              <textarea
                id="message"
                name="message"
                rows="6"
                required
                class="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-harmony focus:border-harmony sm:text-sm py-3 px-4"
                placeholder="Tell us how we can help..."
                aria-describedby="message-error"
              ></textarea>
              <div id="message-error" class="mt-1 text-sm text-red-600 hidden" role="alert"></div>
            </div>

            <!-- Privacy & Consent -->
            <div class="border-t pt-6">
              <div class="flex items-start">
                <input
                  id="consent"
                  name="consentGiven"
                  type="checkbox"
                  required
                  class="h-4 w-4 text-harmony focus:ring-harmony border-gray-300 rounded mt-1"
                  aria-describedby="consent-error"
                />
                <label for="consent" class="ml-2 block text-sm text-gray-700">
                  I consent to Sing for Hope processing my personal information to respond to my inquiry. 
                  We will not share your information with third parties. *
                </label>
              </div>
              <div id="consent-error" class="mt-1 text-sm text-red-600 hidden" role="alert"></div>
            </div>

            <div class="flex items-center">
              <input
                id="newsletter-signup"
                name="newsletter"
                type="checkbox"
                class="h-4 w-4 text-harmony focus:ring-harmony border-gray-300 rounded"
              />
              <label for="newsletter-signup" class="ml-2 block text-sm text-gray-700">
                I'd like to receive updates about Sing for Hope programs and events
              </label>
            </div>

            <!-- Honeypot field (hidden) -->
            <div style="position: absolute; left: -5000px;" aria-hidden="true">
              <input type="text" name="honeypot" tabindex="-1" autocomplete="off">
            </div>

            <div>
              <button
                type="submit"
                class="w-full btn-harmony justify-center py-3 text-base font-medium"
                id="submit-button"
              >
                <span id="button-text">Send Message</span>
                <svg id="loading-spinner" class="animate-spin -ml-1 mr-3 h-5 w-5 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </button>
            </div>
          </form>
          </div>

          <!-- Chat Panel with Smooth Animation -->
          <div id="chat-panel" role="tabpanel" aria-labelledby="chat-tab" class="hidden transition-all duration-500 ease-in-out opacity-0 transform translate-y-4">
            <div class="bg-white border border-gray-200 rounded-xl shadow-lg h-[600px] flex flex-col overflow-hidden backdrop-blur-sm">
              <!-- Enhanced Chat Header with Animation -->
              <div class="border-b border-gray-200 p-4 bg-gradient-to-r from-gray-50 to-gray-100 rounded-t-xl">
                <div class="flex items-center">
                  <div class="relative w-8 h-8 bg-gradient-to-br from-harmony to-harmonydark rounded-full flex items-center justify-center mr-3 shadow-md">
                    <svg class="w-5 h-5 text-white animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                    </svg>
                    <!-- Pulse Ring Animation -->
                    <div class="absolute inset-0 rounded-full border-2 border-harmony animate-ping opacity-20"></div>
                  </div>
                  <div>
                    <p class="font-semibold text-gray-900">Sing for Hope Assistant</p>
                    <p class="text-xs text-gray-600 flex items-center">
                      <span class="w-1.5 h-1.5 bg-green-500 rounded-full mr-1 animate-pulse"></span>
                      Ready to help you connect
                    </p>
                  </div>
                  <div class="ml-auto">
                    <span class="inline-flex items-center px-3 py-1.5 rounded-full text-xs bg-gradient-to-r from-green-100 to-emerald-100 text-green-800 border border-green-200/50">
                      <span class="w-2 h-2 bg-green-500 rounded-full mr-1.5 animate-pulse"></span>
                      Online
                    </span>
                  </div>
                </div>
              </div>

              <!-- Chat Messages -->
              <div id="chat-messages" class="flex-1 p-4 overflow-y-auto space-y-4">
                <!-- Welcome Message -->
                <div class="flex items-start">
                  <div class="w-6 h-6 bg-harmony rounded-full flex items-center justify-center mr-2 flex-shrink-0">
                    <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                    </svg>
                  </div>
                  <div class="bg-gray-100 rounded-lg px-3 py-2 max-w-xs">
                    <p class="text-sm text-gray-800">Hi! I'm here to help you get in touch with Sing for Hope. How can I assist you today?</p>
                  </div>
                </div>

                <!-- Quick Action Buttons -->
                <div class="flex flex-wrap gap-2 pl-8">
                  <button class="quick-action-btn px-3 py-1 text-xs bg-harmony text-white rounded-full hover:bg-harmonydark transition-colors" data-action="press">
                    📰 Press Inquiry
                  </button>
                  <button class="quick-action-btn px-3 py-1 text-xs bg-rhythm text-white rounded-full hover:bg-rhythmdark transition-colors" data-action="volunteer">
                    🙋‍♀️ Volunteer
                  </button>
                  <button class="quick-action-btn px-3 py-1 text-xs bg-melody text-white rounded-full hover:bg-melodydark transition-colors" data-action="donor">
                    💝 Donate
                  </button>
                  <button class="quick-action-btn px-3 py-1 text-xs bg-sonata text-gray-900 rounded-full hover:bg-sonatadark transition-colors" data-action="general">
                    ❓ General Question
                  </button>
                </div>

                <!-- FAQ Section -->
                <div class="pl-8">
                  <p class="text-xs text-gray-500 mb-2">Or ask about:</p>
                  <div class="space-y-1">
                    <button class="faq-btn block text-left text-xs text-harmony hover:underline" data-faq="programs">
                      What programs does Sing for Hope offer?
                    </button>
                    <button class="faq-btn block text-left text-xs text-harmony hover:underline" data-faq="pianos">
                      How can I find a Sing for Hope Piano near me?
                    </button>
                    <button class="faq-btn block text-left text-xs text-harmony hover:underline" data-faq="volunteer">
                      How do I volunteer with Sing for Hope?
                    </button>
                    <button class="faq-btn block text-left text-xs text-harmony hover:underline" data-faq="donate">
                      How can I support your mission?
                    </button>
                  </div>
                </div>
              </div>

              <!-- Chat Input -->
              <div class="border-t border-gray-200 p-4">
                <div class="flex items-end space-x-2">
                  <div class="flex-1 min-w-0">
                    <textarea
                      id="chat-input"
                      placeholder="Type your message..."
                      class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm resize-none focus:ring-2 focus:ring-harmony focus:border-harmony"
                      rows="2"
                    ></textarea>
                  </div>
                  <button
                    id="send-chat-btn"
                    class="bg-harmony text-white p-2 rounded-lg hover:bg-harmonydark transition-colors"
                    disabled
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                    </svg>
                  </button>
                </div>
                <div class="mt-2 flex items-center justify-between">
                  <button
                    id="switch-to-form-btn"
                    class="text-xs text-gray-500 hover:text-harmony transition-colors"
                  >
                    Switch to form →
                  </button>
                  <p class="text-xs text-gray-400">Press Enter to send</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Contact Information -->
        <div>
          <h2 class="text-2xl font-bold text-gray-900 mb-6">Contact Information</h2>
          
          <div class="space-y-8">
            <!-- Office -->
            <div>
              <h3 class="text-lg font-medium text-gray-900 mb-3 flex items-center">
                <svg class="w-5 h-5 text-harmony mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                Main Office
              </h3>
              <div class="text-gray-600">
                <p>99 Wall Street #1812</p>
                <p>New York, NY 10005</p>
              </div>
            </div>

            <!-- General Contact -->
            <div>
              <h3 class="text-lg font-medium text-gray-900 mb-3 flex items-center">
                <svg class="w-5 h-5 text-harmony mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
                General Inquiries
              </h3>
              <div class="text-gray-600">
                <p>Email: <a href="mailto:hello@singforhope.org" class="text-harmony hover:text-harmonydark">hello@singforhope.org</a></p>
                <p>Phone: <a href="tel:+1-212-586-7000" class="text-harmony hover:text-harmonydark">(212) 586-7000</a></p>
              </div>
            </div>

            <!-- Press -->
            <div>
              <h3 class="text-lg font-medium text-gray-900 mb-3 flex items-center">
                <svg class="w-5 h-5 text-harmony mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9.5a2.5 2.5 0 00-2.5-2.5H15" />
                </svg>
                Press & Media
              </h3>
              <div class="text-gray-600">
                <p>Email: <a href="mailto:press@singforhope.org" class="text-harmony hover:text-harmonydark">press@singforhope.org</a></p>
                <p><a href="/press" class="text-harmony hover:text-harmonydark">Press Resources →</a></p>
              </div>
            </div>

            <!-- Programs -->
            <div>
              <h3 class="text-lg font-medium text-gray-900 mb-3 flex items-center">
                <svg class="w-5 h-5 text-harmony mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                </svg>
                Programs
              </h3>
              <div class="text-gray-600">
                <p>Email: <a href="mailto:programs@singforhope.org" class="text-harmony hover:text-harmonydark">programs@singforhope.org</a></p>
                <p><a href="/programs" class="text-harmony hover:text-harmonydark">Learn about our programs →</a></p>
              </div>
            </div>

            <!-- Social Media -->
            <div>
              <h3 class="text-lg font-medium text-gray-900 mb-3">Follow Us</h3>
              <div class="flex space-x-4">
                <a href="#" class="text-gray-400 hover:text-harmony transition-colors">
                  <span class="sr-only">Facebook</span>
                  <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z"/>
                  </svg>
                </a>
                <a href="#" class="text-gray-400 hover:text-harmony transition-colors">
                  <span class="sr-only">Instagram</span>
                  <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12.017 0C5.396 0 .029 5.367.029 11.987c0 6.62 5.367 11.987 11.988 11.987c6.62 0 11.987-5.367 11.987-11.987C24.014 5.367 18.637.001 12.017.001zM8.449 16.988c-1.297 0-2.448-.49-3.324-1.297L6.391 14.425c.687.687 1.637 1.112 2.696 1.112c2.087 0 3.781-1.693 3.781-3.781c0-2.087-1.694-3.781-3.781-3.781c-1.059 0-2.009.425-2.696 1.112L4.125 7.821c.876-.807 2.027-1.297 3.324-1.297c2.731 0 4.948 2.218 4.948 4.948S11.18 16.42 8.449 16.42z"/>
                  </svg>
                </a>
                <a href="#" class="text-gray-400 hover:text-harmony transition-colors">
                  <span class="sr-only">Twitter</span>
                  <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"/>
                  </svg>
                </a>
                <a href="#" class="text-gray-400 hover:text-harmony transition-colors">
                  <span class="sr-only">LinkedIn</span>
                  <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                  </svg>
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Base>

<script>
// Global state for shared context between form and chat
let sharedContext = {
  intentType: '',
  firstName: '',
  lastName: '',
  email: '',
  organization: '',
  message: ''
};

// FAQ responses
const faqResponses = {
  programs: "Sing for Hope offers five core programs:\n\n🎹 **Sing for Hope Pianos** - Artist-designed pianos in public spaces\n📚 **Education** - Arts curricula tied to UN Global Goals\n🏥 **Public Health & Wellness** - Creative programs in healthcare settings\n🌍 **Cultural Diplomacy** - Arts for policy and peace-building\n💼 **Creative Workforce Development** - Training artists as community leaders\n\nWould you like to know more about any specific program?",
  pianos: "You can find Sing for Hope Pianos near you by:\n\n🗺️ **Piano Map**: Visit our interactive map to see current piano locations\n📱 **Follow Us**: We announce new piano placements on social media\n📧 **Newsletter**: Subscribe for updates on piano installations in your area\n\nPianos are typically placed in parks, hospitals, schools, and community centers from June through September, then moved to permanent homes for year-round activation.",
  volunteer: "Great question! There are many ways to volunteer with Sing for Hope:\n\n🎨 **Piano Painting**: Help artists design and paint our signature pianos\n🎪 **Event Support**: Assist with concerts, installations, and community events\n📚 **Educational Programs**: Support our school and community workshops\n💻 **Administrative**: Help with office tasks, social media, and communications\n\nInterested in volunteering? I can connect you with our volunteer coordinator!",
  donate: "Thank you for your interest in supporting our mission! You can help in several ways:\n\n💝 **One-time Donation**: Make an immediate impact\n🔄 **Monthly Giving**: Provide sustainable support\n🎹 **Sponsor a Piano**: Fund a piano's creation and placement\n🎓 **Program Sponsorship**: Support specific educational or health programs\n\nAll donations are tax-deductible, and 100% goes directly to programs. Would you like me to connect you with our development team?"
};

document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('contact-form');
  const submitButton = document.getElementById('submit-button');
  const intentSelect = document.getElementById('intent-type');
  
  // Chat elements
  const chatInput = document.getElementById('chat-input');
  const sendChatBtn = document.getElementById('send-chat-btn');
  const chatMessages = document.getElementById('chat-messages');
  const switchToFormBtn = document.getElementById('switch-to-form-btn');
  
  // Enhanced mode switching with smooth animations
  window.switchToMode = function(mode) {
    const formTab = document.getElementById('form-tab');
    const chatTab = document.getElementById('chat-tab');
    const formPanel = document.getElementById('form-panel');
    const chatPanel = document.getElementById('chat-panel');
    const tabSlider = document.getElementById('tab-slider');
    
    if (mode === 'form') {
      // Animate tab slider
      if (tabSlider) {
        tabSlider.style.transform = 'translateX(0)';
      }
      
      // Update tab states with enhanced styling
      formTab.setAttribute('aria-selected', 'true');
      chatTab.setAttribute('aria-selected', 'false');
      formTab.className = 'px-6 py-2 rounded-lg text-sm font-medium transition-all duration-300 text-harmony flex items-center space-x-2 min-w-[100px] justify-center relative z-10';
      chatTab.className = 'px-6 py-2 rounded-lg text-sm font-medium transition-all duration-300 text-gray-500 hover:text-gray-700 flex items-center space-x-2 min-w-[100px] justify-center';
      
      // Animate icon rotation
      const formIcon = formTab.querySelector('svg');
      const chatIcon = chatTab.querySelector('svg');
      if (formIcon) formIcon.style.transform = 'rotate(0deg) scale(1.05)';
      if (chatIcon) chatIcon.style.transform = 'rotate(0deg) scale(1)';
      
      // Smooth panel transition
      if (!formPanel.classList.contains('hidden')) {
        // Already visible, no animation needed
        applyContextToForm();
        return;
      }
      
      // Hide chat panel with animation
      if (chatPanel && !chatPanel.classList.contains('hidden')) {
        chatPanel.style.opacity = '0';
        chatPanel.style.transform = 'translateY(10px)';
        
        setTimeout(() => {
          chatPanel.classList.add('hidden');
          chatPanel.classList.add('opacity-0', 'transform', 'translate-y-4');
          
          // Show form panel with animation
          formPanel.classList.remove('hidden');
          formPanel.style.opacity = '0';
          formPanel.style.transform = 'translateY(-10px)';
          
          // Trigger animation
          requestAnimationFrame(() => {
            formPanel.style.transition = 'all 0.4s ease-in-out';
            formPanel.style.opacity = '1';
            formPanel.style.transform = 'translateY(0)';
          });
          
          applyContextToForm();
        }, 200);
      } else {
        // Just show form panel
        formPanel.classList.remove('hidden');
        formPanel.style.opacity = '1';
        formPanel.style.transform = 'translateY(0)';
        applyContextToForm();
      }
      
    } else {
      // Animate tab slider to right
      if (tabSlider) {
        tabSlider.style.transform = 'translateX(calc(100% + 4px))';
      }
      
      // Update tab states with enhanced styling
      chatTab.setAttribute('aria-selected', 'true');
      formTab.setAttribute('aria-selected', 'false');
      chatTab.className = 'px-6 py-2 rounded-lg text-sm font-medium transition-all duration-300 text-harmony flex items-center space-x-2 min-w-[100px] justify-center relative z-10';
      formTab.className = 'px-6 py-2 rounded-lg text-sm font-medium transition-all duration-300 text-gray-500 hover:text-gray-700 flex items-center space-x-2 min-w-[100px] justify-center';
      
      // Animate icon rotation  
      const formIcon = formTab.querySelector('svg');
      const chatIcon = chatTab.querySelector('svg');
      if (chatIcon) chatIcon.style.transform = 'rotate(0deg) scale(1.05)';
      if (formIcon) formIcon.style.transform = 'rotate(0deg) scale(1)';
      
      // Smooth panel transition
      if (!chatPanel.classList.contains('hidden')) {
        // Already visible, no animation needed
        updateContextFromForm();
        return;
      }
      
      // Hide form panel with animation
      if (formPanel && !formPanel.classList.contains('hidden')) {
        formPanel.style.opacity = '0';
        formPanel.style.transform = 'translateY(-10px)';
        
        setTimeout(() => {
          formPanel.classList.add('hidden');
          
          // Show chat panel with animation
          chatPanel.classList.remove('hidden', 'opacity-0', 'transform', 'translate-y-4');
          chatPanel.style.opacity = '0';
          chatPanel.style.transform = 'translateY(10px)';
          
          // Trigger animation
          requestAnimationFrame(() => {
            chatPanel.style.transition = 'all 0.4s ease-in-out';
            chatPanel.style.opacity = '1';
            chatPanel.style.transform = 'translateY(0)';
          });
          
          updateContextFromForm();
        }, 200);
      } else {
        // Just show chat panel
        chatPanel.classList.remove('hidden', 'opacity-0', 'transform', 'translate-y-4');
        chatPanel.style.opacity = '1';
        chatPanel.style.transform = 'translateY(0)';
        updateContextFromForm();
      }
    }
  };
  
  // Enhanced shared context application to form
  function applyContextToForm() {
    if (sharedContext.intentType) {
      const intentSelect = document.getElementById('intent-type');
      if (intentSelect) {
        intentSelect.value = sharedContext.intentType;
        toggleDynamicFields(sharedContext.intentType);
        // Trigger validation for the intent field
        validateField('intentType', sharedContext.intentType);
      }
    }
    
    // Apply personal information if available
    if (sharedContext.firstName) {
      const firstNameField = document.querySelector('[name="firstName"]');
      if (firstNameField) {
        firstNameField.value = sharedContext.firstName;
        validateField('firstName', sharedContext.firstName);
      }
    }
    
    if (sharedContext.lastName) {
      const lastNameField = document.querySelector('[name="lastName"]');
      if (lastNameField) {
        lastNameField.value = sharedContext.lastName;
        validateField('lastName', sharedContext.lastName);
      }
    }
    
    if (sharedContext.email) {
      const emailField = document.querySelector('[name="email"]');
      if (emailField) {
        emailField.value = sharedContext.email;
        validateField('email', sharedContext.email);
      }
    }
    
    if (sharedContext.organization) {
      const orgField = document.querySelector('[name="organization"]');
      if (orgField) {
        orgField.value = sharedContext.organization;
      }
    }
    
    if (sharedContext.message) {
      const messageField = document.querySelector('[name="message"]');
      if (messageField) {
        messageField.value = sharedContext.message;
        validateField('message', sharedContext.message);
      }
    }
    
    // Show helpful toast if context was pre-filled
    if (sharedContext.intentType || sharedContext.message) {
      setTimeout(() => {
        showContextToast();
      }, 500);
    }
  }
  
  // Show toast indicating context has been pre-filled
  function showContextToast() {
    const contextInfo = [];
    if (sharedContext.intentType) {
      const intentTypes = {
        'press': 'Press Inquiry',
        'volunteer': 'Volunteer Interest',
        'donor': 'Donor Interest',
        'general': 'General Inquiry'
      };
      contextInfo.push(`Type: ${intentTypes[sharedContext.intentType] || sharedContext.intentType}`);
    }
    if (sharedContext.message) {
      contextInfo.push('Pre-filled message from chat');
    }
    
    if (contextInfo.length > 0) {
      showToast('info', 'Form Pre-filled', 
        `We've pre-filled some information from your chat: ${contextInfo.join(', ')}.`);
    }
  }
  
  // Enhanced shared context updates from form fields
  function updateContextFromForm() {
    const intentSelect = document.getElementById('intent-type');
    if (intentSelect) sharedContext.intentType = intentSelect.value;
    
    const firstNameField = document.querySelector('[name="firstName"]');
    if (firstNameField) sharedContext.firstName = firstNameField.value;
    
    const lastNameField = document.querySelector('[name="lastName"]');  
    if (lastNameField) sharedContext.lastName = lastNameField.value;
    
    const emailField = document.querySelector('[name="email"]');
    if (emailField) sharedContext.email = emailField.value;
    
    const orgField = document.querySelector('[name="organization"]');
    if (orgField) sharedContext.organization = orgField.value;
    
    const messageField = document.querySelector('[name="message"]');
    if (messageField) sharedContext.message = messageField.value;
  }
  
  // Real-time context synchronization
  function setupContextSync() {
    // Listen for form field changes to keep context updated
    const fieldsToSync = [
      { selector: '#intent-type', key: 'intentType' },
      { selector: '[name="firstName"]', key: 'firstName' },
      { selector: '[name="lastName"]', key: 'lastName' },
      { selector: '[name="email"]', key: 'email' },
      { selector: '[name="organization"]', key: 'organization' },
      { selector: '[name="message"]', key: 'message' }
    ];
    
    fieldsToSync.forEach(({ selector, key }) => {
      const field = document.querySelector(selector);
      if (field) {
        field.addEventListener('input', function() {
          sharedContext[key] = this.value;
        });
        field.addEventListener('change', function() {
          sharedContext[key] = this.value;
        });
      }
    });
  }
  
  // Initialize context sync after form is ready
  setTimeout(setupContextSync, 100);
  
  // Typing indicator functions
  function showTypingIndicator() {
    const typingDiv = document.createElement('div');
    typingDiv.id = 'typing-indicator';
    typingDiv.className = 'flex items-start opacity-0 transform translate-y-2';
    
    typingDiv.innerHTML = `
      <div class="w-6 h-6 bg-gradient-to-br from-harmony to-harmonydark rounded-full flex items-center justify-center mr-2 flex-shrink-0 shadow-sm">
        <svg class="w-3 h-3 text-white animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
        </svg>
      </div>
      <div class="bg-white border border-gray-200 shadow-sm rounded-xl px-4 py-3 max-w-sm relative ml-1">
        <div class="absolute left-0 top-3 w-2 h-2 bg-white transform rotate-45 -translate-x-1 border-l border-b border-gray-200"></div>
        <div class="flex space-x-1">
          <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
          <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s;"></div>
          <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.4s;"></div>
        </div>
      </div>
    `;
    
    chatMessages.appendChild(typingDiv);
    
    // Animate entrance
    requestAnimationFrame(() => {
      typingDiv.style.transition = 'all 0.3s ease-out';
      typingDiv.style.opacity = '1';
      typingDiv.style.transform = 'translateY(0)';
    });
    
    // Scroll to bottom
    setTimeout(() => {
      chatMessages.scrollTo({
        top: chatMessages.scrollHeight,
        behavior: 'smooth'
      });
    }, 100);
  }
  
  function hideTypingIndicator() {
    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) {
      typingIndicator.style.opacity = '0';
      typingIndicator.style.transform = 'translateY(-10px)';
      setTimeout(() => {
        typingIndicator.remove();
      }, 300);
    }
  }
  
  // Enhanced chat functionality with animations
  function addChatMessage(content, isUser = false, isHTML = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `flex items-start ${isUser ? 'justify-end' : ''} opacity-0 transform translate-y-4`;
    
    // Enhanced message styling
    const messageContent = `
      ${!isUser ? `
        <div class="w-6 h-6 bg-gradient-to-br from-harmony to-harmonydark rounded-full flex items-center justify-center mr-2 flex-shrink-0 shadow-sm">
          <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
          </svg>
        </div>
      ` : ''}
      <div class="bg-${isUser ? 'gradient-to-r from-harmony to-harmonydark text-white shadow-md' : 'white border border-gray-200 shadow-sm'} rounded-xl px-4 py-3 max-w-sm relative ${isUser ? '' : 'ml-1'}">
        ${!isUser ? '<div class="absolute left-0 top-3 w-2 h-2 bg-white transform rotate-45 -translate-x-1 border-l border-b border-gray-200"></div>' : ''}
        <div class="text-sm ${isUser ? 'text-white' : 'text-gray-800'} ${isHTML ? '' : 'whitespace-pre-line'}">${isHTML ? content : content}</div>
      </div>
      ${isUser ? `
        <div class="w-6 h-6 bg-gradient-to-br from-gray-400 to-gray-600 rounded-full flex items-center justify-center ml-2 flex-shrink-0 shadow-sm">
          <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
          </svg>
        </div>
      ` : ''}
    `;
    
    messageDiv.innerHTML = messageContent;
    chatMessages.appendChild(messageDiv);
    
    // Animate message entrance
    requestAnimationFrame(() => {
      messageDiv.style.transition = 'all 0.3s ease-out';
      messageDiv.style.opacity = '1';
      messageDiv.style.transform = 'translateY(0)';
    });
    
    // Add typing indicator animation for bot messages
    if (!isUser) {
      const messageContent = messageDiv.querySelector('.text-sm');
      messageContent.style.opacity = '0';
      
      setTimeout(() => {
        messageContent.style.transition = 'opacity 0.4s ease-in';
        messageContent.style.opacity = '1';
      }, 150);
    }
    
    // Smooth scroll to bottom
    setTimeout(() => {
      chatMessages.scrollTo({
        top: chatMessages.scrollHeight,
        behavior: 'smooth'
      });
    }, 100);
  }
  
  // Handle quick action buttons
  document.querySelectorAll('.quick-action-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const action = this.getAttribute('data-action');
      sharedContext.intentType = action;
      
      const actionMessages = {
        press: "I'm interested in press and media opportunities. Can you help me get in touch with your media team?",
        volunteer: "I'd like to volunteer with Sing for Hope. What opportunities are available?",
        donor: "I'm interested in supporting Sing for Hope's mission. How can I donate or get involved as a donor?",
        general: "I have a general question about Sing for Hope."
      };
      
      const responses = {
        press: "Great! I'll connect you with our press team. They handle all media inquiries and can provide press kits, interviews, and story opportunities. Let me gather some information first.\n\nWhat's your publication or media organization?",
        volunteer: "Wonderful! We love our volunteers. There are many ways to get involved:\n\n🎨 Help paint pianos\n🎪 Support events\n📚 Assist with educational programs\n💻 Administrative support\n\nWhat type of volunteer work interests you most?",
        donor: "Thank you for your interest in supporting our mission! Our development team can help you find the perfect way to make an impact.\n\nAre you interested in:\n• One-time donations\n• Monthly giving\n• Sponsoring a piano\n• Supporting specific programs",
        general: "I'm happy to help! What would you like to know about Sing for Hope?\n\nYou can ask about our programs, upcoming events, how to get involved, or anything else."
      };
      
      addChatMessage(actionMessages[action], true);
      
      setTimeout(() => {
        addChatMessage(responses[action]);
        // Remove quick action buttons after selection
        this.parentNode.style.display = 'none';
      }, 500);
    });
  });
  
  // Handle FAQ buttons
  document.querySelectorAll('.faq-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const faq = this.getAttribute('data-faq');
      const question = this.textContent;
      
      addChatMessage(question, true);
      
      setTimeout(() => {
        addChatMessage(faqResponses[faq]);
      }, 500);
    });
  });
  
  // Enhanced chat message sending with guided flows
  function enableSendButton() {
    sendChatBtn.disabled = !chatInput.value.trim();
  }
  
  chatInput.addEventListener('input', enableSendButton);
  chatInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendChatMessage();
    }
  });
  
  sendChatBtn.addEventListener('click', sendChatMessage);
  
  function sendChatMessage() {
    const message = chatInput.value.trim();
    if (!message) return;
    
    addChatMessage(message, true);
    chatInput.value = '';
    enableSendButton();
    
    // Add typing indicator
    showTypingIndicator();
    
    // Enhanced response logic with guided flows
    setTimeout(() => {
      // Remove typing indicator
      hideTypingIndicator();
      let response = "";
      let followUp = "";
      let actionButtons = "";
      
      const msgLower = message.toLowerCase();
      
      // Intent detection and guided responses
      if (msgLower.includes('volunteer') || msgLower.includes('help out') || msgLower.includes('get involved')) {
        response = "Wonderful! We love our volunteers and have many exciting opportunities. Here's how you can get involved:\n\n🎨 **Piano Painting**: Help artists create our signature pianos\n🎪 **Event Support**: Assist with concerts and installations\n📚 **Educational Programs**: Support workshops in schools and communities\n💻 **Administrative**: Help with communications and operations";
        followUp = "What type of volunteer work interests you most?";
        sharedContext.intentType = 'volunteer';
        sharedContext.message = "I'm interested in volunteering with Sing for Hope. Please contact me with more information about opportunities.";
        
        actionButtons = `
          <div class="flex flex-wrap gap-2 mt-3">
            <button onclick="handleGuidedFlow('volunteer-painting')" class="bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full text-sm hover:bg-yellow-200 transition-colors">
              🎨 Piano Painting
            </button>
            <button onclick="handleGuidedFlow('volunteer-events')" class="bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm hover:bg-purple-200 transition-colors">
              🎪 Events
            </button>
            <button onclick="handleGuidedFlow('volunteer-education')" class="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm hover:bg-blue-200 transition-colors">
              📚 Education
            </button>
            <button onclick="handleGuidedFlow('volunteer-form')" class="bg-emerald-100 text-emerald-700 px-3 py-1 rounded-full text-sm hover:bg-emerald-200 transition-colors">
              📝 Apply Now
            </button>
          </div>
        `;
        
      } else if (msgLower.includes('donate') || msgLower.includes('give') || msgLower.includes('support') || msgLower.includes('fund')) {
        response = "Thank you for your generous heart! Your support makes our mission possible. Here are ways you can help:\n\n💝 **One-time Donation**: Make an immediate impact\n🔄 **Monthly Giving**: Provide sustainable support  \n🎹 **Sponsor a Piano**: Fund a piano's creation and placement ($5,000)\n🎓 **Program Support**: Support education or health programs";
        followUp = "Which option interests you most, or would you like to speak with our development team?";
        sharedContext.intentType = 'donor';
        sharedContext.message = "I'm interested in supporting Sing for Hope's mission. Please contact me about donation opportunities.";
        
        actionButtons = `
          <div class="flex flex-wrap gap-2 mt-3">
            <button onclick="window.open('https://singforhope.org/donate', '_blank')" class="bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm hover:bg-green-200 transition-colors">
              💝 Donate Now
            </button>
            <button onclick="handleGuidedFlow('sponsor-piano')" class="bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full text-sm hover:bg-yellow-200 transition-colors">
              🎹 Sponsor Piano
            </button>
            <button onclick="handleGuidedFlow('monthly-giving')" class="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm hover:bg-blue-200 transition-colors">
              🔄 Monthly Giving
            </button>
            <button onclick="handleGuidedFlow('donor-form')" class="bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm hover:bg-purple-200 transition-colors">
              📞 Speak with Team
            </button>
          </div>
        `;
        
      } else if (msgLower.includes('press') || msgLower.includes('media') || msgLower.includes('interview') || msgLower.includes('story')) {
        response = "Great! We're always happy to work with media partners. Our press team handles:\n\n📰 **Press Releases**: Latest news and announcements\n📸 **Media Resources**: High-res photos and b-roll footage\n🎤 **Interview Opportunities**: With founders and program participants\n📊 **Impact Stories**: Data and human-interest stories";
        followUp = "What type of media inquiry can we help you with today?";
        sharedContext.intentType = 'press';
        sharedContext.message = "I have a press/media inquiry. Please connect me with your media team.";
        
        actionButtons = `
          <div class="flex flex-wrap gap-2 mt-3">
            <button onclick="handleGuidedFlow('press-story')" class="bg-red-100 text-red-700 px-3 py-1 rounded-full text-sm hover:bg-red-200 transition-colors">
              📝 Story Inquiry
            </button>
            <button onclick="handleGuidedFlow('press-interview')" class="bg-orange-100 text-orange-700 px-3 py-1 rounded-full text-sm hover:bg-orange-200 transition-colors">
              🎤 Interview Request
            </button>
            <button onclick="handleGuidedFlow('press-resources')" class="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm hover:bg-blue-200 transition-colors">
              📸 Media Resources
            </button>
            <button onclick="handleGuidedFlow('press-form')" class="bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm hover:bg-purple-200 transition-colors">
              📞 Contact Press Team
            </button>
          </div>
        `;
        
      } else if (msgLower.includes('piano') || msgLower.includes('find')) {
        response = "Our Sing for Hope Pianos are placed throughout NYC and beyond! Here's how to find them:\n\n🗺️ **Interactive Map**: Check our website for current piano locations\n📱 **Social Media**: Follow @SingforHope for real-time updates\n🏥 **Permanent Homes**: Many pianos stay year-round in hospitals, schools, and community centers\n📅 **Season**: New pianos are typically placed June-September";
        followUp = "Are you looking for a piano in a specific area or interested in our piano program?";
        sharedContext.intentType = 'general';
        
        actionButtons = `
          <div class="flex flex-wrap gap-2 mt-3">
            <button onclick="window.open('/programs', '_blank')" class="bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full text-sm hover:bg-yellow-200 transition-colors">
              🎹 About Pianos
            </button>
            <button onclick="handleGuidedFlow('piano-location')" class="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm hover:bg-blue-200 transition-colors">
              📍 Find Locations
            </button>
            <button onclick="handleGuidedFlow('volunteer-painting')" class="bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm hover:bg-green-200 transition-colors">
              🎨 Help Paint Pianos
            </button>
          </div>
        `;
        
      } else if (msgLower.includes('program') || msgLower.includes('what do you do') || msgLower.includes('mission')) {
        response = faqResponses.programs;
        followUp = "Which program would you like to learn more about?";
        sharedContext.intentType = 'general';
        
        actionButtons = `
          <div class="flex flex-wrap gap-2 mt-3">
            <button onclick="handleGuidedFlow('program-education')" class="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm hover:bg-blue-200 transition-colors">
              📚 Education
            </button>
            <button onclick="handleGuidedFlow('program-health')" class="bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm hover:bg-green-200 transition-colors">
              🏥 Health & Wellness
            </button>
            <button onclick="handleGuidedFlow('program-pianos')" class="bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full text-sm hover:bg-yellow-200 transition-colors">
              🎹 Pianos Program
            </button>
            <button onclick="window.open('/programs', '_blank')" class="bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm hover:bg-purple-200 transition-colors">
              🌟 All Programs
            </button>
          </div>
        `;
        
      } else {
        response = "Thanks for reaching out! I'm here to help you learn more about Sing for Hope and connect you with our team.";
        followUp = "What would you like to know about? I can help with information about volunteering, donating, our programs, or press inquiries.";
        sharedContext.intentType = 'general';
        
        actionButtons = `
          <div class="flex flex-wrap gap-2 mt-3">
            <button onclick="addChatMessage('Tell me about volunteer opportunities', true); setTimeout(() => sendChatResponse('volunteer'), 800);" class="bg-emerald-100 text-emerald-700 px-3 py-1 rounded-full text-sm hover:bg-emerald-200 transition-colors">
              🙋‍♀️ Volunteer
            </button>
            <button onclick="addChatMessage('How can I support your mission?', true); setTimeout(() => sendChatResponse('donate'), 800);" class="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm hover:bg-blue-200 transition-colors">
              💝 Support Us
            </button>
            <button onclick="addChatMessage('What programs do you offer?', true); setTimeout(() => sendChatResponse('programs'), 800);" class="bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full text-sm hover:bg-yellow-200 transition-colors">
              🎵 Programs
            </button>
            <button onclick="handleGuidedFlow('general-form')" class="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm hover:bg-gray-200 transition-colors">
              📝 Contact Form
            </button>
          </div>
        `;
      }
      
      // Send response
      addChatMessage(response);
      
      // Send follow-up after delay
      if (followUp) {
        setTimeout(() => {
          addChatMessage(followUp);
          
          // Add action buttons after another delay
          if (actionButtons) {
            setTimeout(() => {
              addChatMessage(actionButtons, false, true);
            }, 800);
          }
        }, 1500);
      }
    }, 1000);
  }
  
  // Guided flow handler for specific actions
  window.handleGuidedFlow = function(flowType) {
    switch(flowType) {
      case 'volunteer-painting':
        addChatMessage("Piano painting is one of our most popular volunteer opportunities! Artists and community members work together to transform pianos into beautiful works of art.\n\n📅 **When**: Typically April-May before summer placement\n🎨 **What**: Help artists paint, prep, and move pianos\n⏰ **Time**: Various shifts available, 2-4 hours\n👥 **Groups**: Welcome for corporate and community groups");
        setTimeout(() => {
          addChatMessage("Would you like me to connect you with our volunteer coordinator about upcoming piano painting sessions?", false, false);
          setTimeout(() => {
            addChatMessage(`
              <div class="flex flex-wrap gap-2 mt-3">
                <button onclick="handleGuidedFlow('volunteer-form')" class="bg-emerald-100 text-emerald-700 px-3 py-1 rounded-full text-sm hover:bg-emerald-200 transition-colors">
                  ✅ Yes, sign me up!
                </button>
                <button onclick="addChatMessage('Tell me about other volunteer opportunities', true);" class="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm hover:bg-gray-200 transition-colors">
                  🔄 Other opportunities
                </button>
              </div>
            `, false, true);
          }, 1000);
        }, 1500);
        break;
        
      case 'volunteer-form':
        addChatMessage("Perfect! I'll switch you to our contact form with volunteer information pre-selected. Our volunteer coordinator will reach out within 2-3 business days with current opportunities.");
        sharedContext.intentType = 'volunteer';
        sharedContext.message = 'I\'m interested in volunteering with Sing for Hope, especially piano painting opportunities. Please contact me with information about upcoming volunteer sessions.';
        setTimeout(() => {
          switchToMode('form');
        }, 2000);
        break;
        
      case 'donor-form':
        addChatMessage("Excellent! I'll connect you with our development team through our contact form. They'll reach out within 1-2 business days to discuss the best ways for you to support our mission.");
        sharedContext.intentType = 'donor';
        sharedContext.message = 'I\'m interested in supporting Sing for Hope through donations or other giving opportunities. Please have your development team contact me.';
        setTimeout(() => {
          switchToMode('form');
        }, 2000);
        break;
        
      case 'press-form':
        addChatMessage("Great! I'll connect you directly with our press team. They handle all media inquiries and typically respond within 24 hours during business days.");
        sharedContext.intentType = 'press';
        sharedContext.message = 'I have a press/media inquiry for Sing for Hope. Please have your press team contact me.';
        setTimeout(() => {
          switchToMode('form');
        }, 2000);
        break;
        
      case 'general-form':
        addChatMessage("I'll take you to our contact form where you can provide more details about your inquiry.");
        sharedContext.intentType = 'general';
        setTimeout(() => {
          switchToMode('form');
        }, 1500);
        break;
        
      case 'sponsor-piano':
        addChatMessage("Piano sponsorship is a wonderful way to make a lasting impact! For $5,000, you can sponsor an entire piano from creation to placement.\n\n🎨 **Your piano**: Gets custom artwork and your dedication\n📍 **Placement**: You can suggest preferred locations\n🌟 **Recognition**: Acknowledgment at unveiling events\n📸 **Documentation**: Photos and updates throughout the process");
        setTimeout(() => {
          addChatMessage("Would you like to speak with our development team about piano sponsorship opportunities?");
          setTimeout(() => {
            addChatMessage(`
              <div class="flex flex-wrap gap-2 mt-3">
                <button onclick="handleGuidedFlow('donor-form')" class="bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full text-sm hover:bg-yellow-200 transition-colors">
                  🎹 Yes, I'm interested
                </button>
                <button onclick="addChatMessage('Tell me about other ways to give', true);" class="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm hover:bg-blue-200 transition-colors">
                  💝 Other giving options
                </button>
              </div>
            `, false, true);
          }, 1000);
        }, 1500);
        break;
    }
  };
  
  // Helper function for quick chat responses
  window.sendChatResponse = function(type) {
    const responses = {
      volunteer: "Wonderful! We love our volunteers and have many exciting opportunities...",
      donate: "Thank you for your generous heart! Your support makes our mission possible...",
      programs: faqResponses.programs
    };
    
    if (responses[type]) {
      addChatMessage(responses[type]);
    }
  };
  
  // Switch to form button
  switchToFormBtn.addEventListener('click', () => switchToMode('form'));

  // Keyboard navigation for tabs (WAI-ARIA compliant)
  function setupTabKeyboardNavigation() {
    const formTab = document.getElementById('form-tab');
    const chatTab = document.getElementById('chat-tab');
    const tabs = [formTab, chatTab];
    
    let currentTabIndex = 0; // Form tab is initially active

    // Set initial tabindex values
    function updateTabIndexes() {
      tabs.forEach((tab, index) => {
        if (tab) {
          tab.setAttribute('tabindex', index === currentTabIndex ? '0' : '-1');
        }
      });
    }

    // Set up keyboard event listeners for each tab
    tabs.forEach((tab, index) => {
      if (!tab) return;

      tab.addEventListener('keydown', (e) => {
        let newIndex = currentTabIndex;
        
        switch (e.key) {
          case 'ArrowLeft':
          case 'ArrowUp':
            e.preventDefault();
            newIndex = currentTabIndex > 0 ? currentTabIndex - 1 : tabs.length - 1;
            break;
          case 'ArrowRight':
          case 'ArrowDown':
            e.preventDefault();
            newIndex = currentTabIndex < tabs.length - 1 ? currentTabIndex + 1 : 0;
            break;
          case 'Home':
            e.preventDefault();
            newIndex = 0;
            break;
          case 'End':
            e.preventDefault();
            newIndex = tabs.length - 1;
            break;
          case 'Enter':
          case ' ':
            e.preventDefault();
            // Activate the currently focused tab
            if (currentTabIndex === 0) {
              switchToMode('form');
            } else {
              switchToMode('chat');
            }
            return;
          default:
            return;
        }

        if (newIndex !== currentTabIndex) {
          currentTabIndex = newIndex;
          updateTabIndexes();
          tabs[currentTabIndex]?.focus();
        }
      });

      // Update currentTabIndex when a tab is clicked
      tab.addEventListener('click', () => {
        currentTabIndex = index;
        updateTabIndexes();
      });
    });

    // Initialize tab indexes
    updateTabIndexes();
  }

  // Initialize keyboard navigation
  setupTabKeyboardNavigation();
  
  // Validation rules
  const validationRules = {
    firstName: { required: true, minLength: 2 },
    lastName: { required: true, minLength: 2 },
    email: { required: true, pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/ },
    intentType: { required: true },
    message: { required: true, minLength: 10 },
    consentGiven: { required: true }
  };

  // Field error messages
  const errorMessages = {
    firstName: 'Please enter your first name (at least 2 characters)',
    lastName: 'Please enter your last name (at least 2 characters)', 
    email: 'Please enter a valid email address',
    intentType: 'Please select how we can help you',
    message: 'Please enter your message (at least 10 characters)',
    consentGiven: 'You must consent to data processing to submit this form'
  };

  // Show/hide dynamic fields based on intent type
  function toggleDynamicFields(intentType) {
    const allFields = ['press-fields', 'volunteer-fields', 'donor-fields'];
    const orgLabel = document.getElementById('org-label');
    const messageLabel = document.getElementById('message-label');
    
    // Hide all dynamic fields
    allFields.forEach(fieldId => {
      const field = document.getElementById(fieldId);
      if (field) field.classList.add('hidden');
    });
    
    // Show relevant fields and update labels based on intent
    if (intentType === 'press') {
      document.getElementById('press-fields').classList.remove('hidden');
      orgLabel.textContent = 'Publication/Organization *';
      messageLabel.textContent = 'Tell us about your story or inquiry *';
    } else if (intentType === 'volunteer') {
      document.getElementById('volunteer-fields').classList.remove('hidden');
      orgLabel.textContent = 'Organization (optional)';
      messageLabel.textContent = 'Tell us about your interest in volunteering *';
    } else if (intentType === 'donor') {
      document.getElementById('donor-fields').classList.remove('hidden');
      orgLabel.textContent = 'Organization (optional)';
      messageLabel.textContent = 'Tell us about your philanthropic interests *';
    } else {
      orgLabel.textContent = 'Organization (optional)';
      messageLabel.textContent = 'Message *';
    }
  }

  // Real-time field validation
  function validateField(fieldName, value, showError = true) {
    const rules = validationRules[fieldName];
    if (!rules) return true;

    let isValid = true;
    let errorMsg = '';

    if (rules.required && (!value || value.trim() === '')) {
      isValid = false;
      errorMsg = errorMessages[fieldName];
    } else if (rules.minLength && value.length < rules.minLength) {
      isValid = false;
      errorMsg = errorMessages[fieldName];
    } else if (rules.pattern && !rules.pattern.test(value)) {
      isValid = false;
      errorMsg = errorMessages[fieldName];
    }

    if (showError) {
      showFieldError(fieldName, isValid ? '' : errorMsg);
    }

    return isValid;
  }

  // Show/hide field error
  function showFieldError(fieldName, message) {
    const errorDiv = document.getElementById(`${fieldName}-error`);
    const field = document.querySelector(`[name="${fieldName}"]`);
    
    if (errorDiv) {
      if (message) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
        if (field) {
          field.classList.add('border-red-300', 'focus:border-red-500', 'focus:ring-red-500');
          field.classList.remove('border-gray-300', 'focus:border-harmony', 'focus:ring-harmony');
        }
      } else {
        errorDiv.classList.add('hidden');
        if (field) {
          field.classList.remove('border-red-300', 'focus:border-red-500', 'focus:ring-red-500');
          field.classList.add('border-gray-300', 'focus:border-harmony', 'focus:ring-harmony');
        }
      }
    }
  }

  // Enhanced toast notification with info type
  function showToast(type, title, message, ticketId = null) {
    const toastContainer = document.getElementById('toast-container');
    const toastMessage = document.getElementById('toast-message');
    const toastIcon = document.getElementById('toast-icon');
    const toastText = document.getElementById('toast-text');
    const toastSubtext = document.getElementById('toast-subtext');

    // Configure toast appearance based on type
    if (type === 'success') {
      toastMessage.className = 'p-4 rounded-lg border border-green-200 bg-green-50';
      toastIcon.innerHTML = `
        <svg class="h-5 w-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
      `;
      toastText.className = 'text-sm font-medium text-green-800';
      toastSubtext.className = 'text-sm text-green-700';
    } else if (type === 'error') {
      toastMessage.className = 'p-4 rounded-lg border border-red-200 bg-red-50';
      toastIcon.innerHTML = `
        <svg class="h-5 w-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      `;
      toastText.className = 'text-sm font-medium text-red-800';
      toastSubtext.className = 'text-sm text-red-700';
    } else if (type === 'info') {
      toastMessage.className = 'p-4 rounded-lg border border-blue-200 bg-blue-50';
      toastIcon.innerHTML = `
        <svg class="h-5 w-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      `;
      toastText.className = 'text-sm font-medium text-blue-800';
      toastSubtext.className = 'text-sm text-blue-700';
    }

    toastText.textContent = title;
    toastSubtext.textContent = ticketId ? `${message} Reference: ${ticketId}` : message;
    toastContainer.classList.remove('hidden');

    // Auto-hide after different durations based on type
    const hideTimeout = type === 'info' ? 5000 : 8000;
    setTimeout(() => {
      toastContainer.classList.add('hidden');
    }, hideTimeout);
  }

  // Event listeners for dynamic fields
  if (intentSelect) {
    intentSelect.addEventListener('change', function() {
      toggleDynamicFields(this.value);
      validateField('intentType', this.value);
    });
  }

  // Real-time validation for all fields
  const fieldsToValidate = ['firstName', 'lastName', 'email', 'message'];
  fieldsToValidate.forEach(fieldName => {
    const field = document.querySelector(`[name="${fieldName}"]`);
    if (field) {
      field.addEventListener('blur', function() {
        validateField(fieldName, this.value);
      });
      field.addEventListener('input', function() {
        // Clear errors as user types
        if (this.value.trim() !== '') {
          showFieldError(fieldName, '');
        }
      });
    }
  });

  // Consent checkbox validation
  const consentCheckbox = document.getElementById('consent');
  if (consentCheckbox) {
    consentCheckbox.addEventListener('change', function() {
      validateField('consentGiven', this.checked);
    });
  }

  // Form submission
  if (form && submitButton) {
    form.addEventListener('submit', async function(e) {
      e.preventDefault();

      // Validate all fields
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      
      let isFormValid = true;
      Object.keys(validationRules).forEach(fieldName => {
        const value = fieldName === 'consentGiven' 
          ? document.getElementById('consent').checked 
          : data[fieldName];
        if (!validateField(fieldName, value)) {
          isFormValid = false;
        }
      });

      // Check honeypot
      if (data.honeypot && data.honeypot.trim() !== '') {
        console.warn('Honeypot field filled - likely spam');
        showToast('error', 'Submission Error', 'Please try again later.');
        return;
      }

      if (!isFormValid) {
        showToast('error', 'Form Validation Error', 'Please correct the errors above and try again.');
        return;
      }

      // Show loading state
      const buttonText = document.getElementById('button-text');
      const loadingSpinner = document.getElementById('loading-spinner');
      
      buttonText.textContent = 'Sending...';
      loadingSpinner.classList.remove('hidden');
      submitButton.disabled = true;

      try {
        // Collect checkbox values for donor programs
        const programCheckboxes = document.querySelectorAll('input[name="programs"]:checked');
        const selectedPrograms = Array.from(programCheckboxes).map(cb => cb.value);
        
        const submissionData = {
          ...data,
          programs: selectedPrograms.length > 0 ? selectedPrograms : null,
          consentGiven: document.getElementById('consent').checked
        };

        const response = await fetch('/api/email/contactForm', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(submissionData),
        });

        const result = await response.json();

        if (response.ok && result.success) {
          // Success
          showToast('success', 
            'Message Sent Successfully!', 
            'We\'ll get back to you soon.',
            result.ticketId
          );
          
          // Reset form
          form.reset();
          toggleDynamicFields(''); // Hide all dynamic fields
          
          // Clear all errors
          Object.keys(validationRules).forEach(fieldName => {
            showFieldError(fieldName, '');
          });
          
        } else {
          // Server error
          showToast('error', 
            'Submission Failed', 
            result.error || 'Please try again later.'
          );
        }

      } catch (error) {
        console.error('Network error:', error);
        showToast('error', 
          'Network Error', 
          'Please check your connection and try again.'
        );
      } finally {
        // Reset button state
        buttonText.textContent = 'Send Message';
        loadingSpinner.classList.add('hidden');
        submitButton.disabled = false;
      }
    });
  }
});
</script>
