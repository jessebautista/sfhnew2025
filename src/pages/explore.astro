---
import Base from '../layouts/Base.astro';

const MAPBOX_TOKEN = import.meta.env.MAPBOX_TOKEN || 'sk.eyJ1Ijoic2ZoaXRzdXBwb3J0IiwiYSI6ImNtZjhiNnliNzA1cmYycHNkb2p5bTdmaWcifQ.WCbXQ8UkV5bQA3sCOLbArQ';
---

<Base
  title="Explore - Sing for Hope"
  description="Discover Sing for Hope Pianos around the world through our interactive map. Explore artworks, locations, and stories from our global community."
>
  <div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow-sm border-b">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center py-4">
          <div>
            <h1 class="text-2xl font-bold text-gray-900">Explore Pianos</h1>
            <p class="text-sm text-gray-500 mt-1">Discover artworks and stories from around the world</p>
          </div>
          
          <!-- View Toggle -->
          <div class="flex items-center space-x-2">
            <button
              id="map-view-btn"
              class="px-4 py-2 text-sm font-medium text-white bg-melody rounded-lg shadow-sm hover:bg-melodydark focus:outline-none focus:ring-2 focus:ring-melody focus:ring-offset-2 transition-colors"
              aria-pressed="true"
            >
              <span class="flex items-center">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"></path>
                </svg>
                Map View
              </span>
            </button>
            <button
              id="feed-view-btn"
              class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-melody focus:ring-offset-2 transition-colors"
              aria-pressed="false"
            >
              <span class="flex items-center">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                </svg>
                Feed View
              </span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Filters Panel -->
    <div class="bg-white shadow-sm border-b">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-4">
          <!-- Search -->
          <div>
            <label for="search-input" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
              <input
                type="text"
                id="search-input"
                class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-melody focus:border-melody sm:text-sm"
                placeholder="Search by title or city..."
                aria-label="Search pianos by title or city"
              />
            </div>
          </div>

          <!-- Year Filter -->
          <div>
            <label for="year-filter" class="block text-sm font-medium text-gray-700 mb-1">Year</label>
            <select
              id="year-filter"
              class="block w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-melody focus:border-melody sm:text-sm"
              aria-label="Filter by year"
            >
              <option value="">All Years</option>
              <option value="2024">2024</option>
              <option value="2023">2023</option>
              <option value="2022">2022</option>
            </select>
          </div>

          <!-- Program Filter -->
          <div>
            <label for="program-filter" class="block text-sm font-medium text-gray-700 mb-1">Program</label>
            <select
              id="program-filter"
              class="block w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-melody focus:border-melody sm:text-sm"
              aria-label="Filter by program"
            >
              <option value="">All Programs</option>
              <option value="Sing for Hope Pianos">Sing for Hope Pianos</option>
              <option value="Healing Arts">Healing Arts</option>
              <option value="Education Outreach">Education Outreach</option>
              <option value="Global Outreach">Global Outreach</option>
              <option value="Workforce Development">Workforce Development</option>
              <option value="Cultural Diplomacy">Cultural Diplomacy</option>
            </select>
          </div>

          <!-- Artwork Filter -->
          <div>
            <label for="artwork-filter" class="block text-sm font-medium text-gray-700 mb-1">Artwork Status</label>
            <select
              id="artwork-filter"
              class="block w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-melody focus:border-melody sm:text-sm"
              aria-label="Filter by artwork status"
            >
              <option value="">All</option>
              <option value="true">With Artwork</option>
              <option value="false">Awaiting Artwork</option>
            </select>
          </div>
        </div>

        <!-- Active Filters Display -->
        <div id="active-filters" class="mt-3 hidden">
          <div class="flex flex-wrap gap-2">
            <span class="text-sm text-gray-500">Active filters:</span>
            <div id="filter-tags" class="flex flex-wrap gap-2"></div>
            <button
              id="clear-filters"
              class="text-sm text-melody hover:text-melodydark underline focus:outline-none focus:ring-2 focus:ring-melody focus:ring-opacity-50 rounded"
              aria-label="Clear all filters"
            >
              Clear all
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="relative flex-1">
      <!-- Map View -->
      <div id="map-container" class="relative">
        <div
          id="map"
          class="w-full h-[calc(100vh-240px)]"
          role="region"
          aria-label="Interactive map showing piano locations"
        ></div>
        
        <!-- Loading State -->
        <div id="map-loading" class="absolute inset-0 bg-gray-50 flex items-center justify-center">
          <div class="text-center">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-melody mx-auto"></div>
            <p class="mt-2 text-sm text-gray-600">Loading map...</p>
          </div>
        </div>

        <!-- Results Counter -->
        <div class="absolute top-4 left-4 bg-white rounded-lg shadow-md px-3 py-2 z-10">
          <span id="results-count" class="text-sm font-medium text-gray-700">0 pianos</span>
        </div>
      </div>

      <!-- Feed View -->
      <div id="feed-container" class="hidden">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div id="piano-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            <!-- Piano cards will be inserted here -->
          </div>
          
          <!-- Empty State -->
          <div id="empty-state" class="hidden text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.462-.676-6.28-1.843C4.775 11.812 4 10.047 4 8.119 4 5.176 6.239 3 9 3h6c2.761 0 5 2.176 5 5.119 0 1.928-.775 3.693-1.72 5.038z"></path>
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No pianos found</h3>
            <p class="mt-1 text-sm text-gray-500">Try adjusting your search or filter criteria.</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Piano Detail Drawer -->
    <div
      id="piano-drawer"
      class="fixed inset-y-0 right-0 w-96 bg-white shadow-2xl transform translate-x-full transition-transform duration-300 ease-in-out z-50 overflow-hidden"
      role="dialog"
      aria-modal="true"
      aria-labelledby="drawer-title"
    >
      <div class="h-full flex flex-col">
        <!-- Drawer Header -->
        <div class="flex items-center justify-between p-4 border-b border-gray-200">
          <h2 id="drawer-title" class="text-lg font-semibold text-gray-900">Piano Details</h2>
          <button
            id="close-drawer"
            class="rounded-full p-2 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-melody focus:ring-opacity-50"
            aria-label="Close piano details"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <!-- Drawer Content -->
        <div id="drawer-content" class="flex-1 overflow-y-auto">
          <!-- Content will be dynamically loaded -->
        </div>
      </div>
    </div>

    <!-- Drawer Overlay -->
    <div
      id="drawer-overlay"
      class="fixed inset-0 bg-black bg-opacity-50 z-40 opacity-0 pointer-events-none transition-opacity duration-300 ease-in-out"
      aria-hidden="true"
    ></div>
  </div>
</Base>

<style>
  /* Custom map styles */
  .mapboxgl-popup {
    max-width: 300px;
  }
  
  .mapboxgl-popup-content {
    border-radius: 8px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }

  /* Custom marker styles */
  .piano-marker {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    cursor: pointer;
    border: 2px solid white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    transition: transform 0.2s ease;
  }

  .piano-marker:hover {
    transform: scale(1.2);
  }

  .piano-marker.has-artwork {
    background-color: #FDD05E; /* sonata yellow */
  }

  .piano-marker.no-artwork {
    background-color: #ffffff;
    border-color: #d1d5db;
  }

  /* Filter tag styles */
  .filter-tag {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.75rem;
    font-size: 0.75rem;
    font-weight: 500;
    background-color: #DA4680;
    color: white;
    border-radius: 9999px;
  }

  .filter-tag button {
    margin-left: 0.25rem;
    color: white;
    opacity: 0.8;
  }

  .filter-tag button:hover {
    opacity: 1;
  }
</style>

<script define:vars={{ MAPBOX_TOKEN }}>
  // We'll load Mapbox GL JS dynamically to avoid loading issues
  
  let map;
  let pianoData = [];
  let filteredData = [];
  let markers = [];
  let currentView = 'map'; // 'map' or 'feed'
  let selectedPiano = null;

  // Initialize the application
  document.addEventListener('DOMContentLoaded', async function() {
    try {
      // Load piano data
      await loadPianoData();
      
      // Initialize map
      await initializeMap();
      
      // Setup event listeners
      setupEventListeners();
      
      // Initial data display
      filterAndDisplayData();
      
    } catch (error) {
      console.error('Failed to initialize explore page:', error);
      showErrorState();
    }
  });

  // Load piano data from GeoJSON
  async function loadPianoData() {
    try {
      const response = await fetch('/data/pianos.geojson');
      if (!response.ok) throw new Error('Failed to load piano data');
      
      const geojson = await response.json();
      pianoData = geojson.features;
      filteredData = [...pianoData];
      console.log('Loaded', pianoData.length, 'pianos from GeoJSON');
      
    } catch (error) {
      console.error('Error loading piano data:', error);
      throw error;
    }
  }

  // Initialize Mapbox map
  async function initializeMap() {
    // Load Mapbox GL JS dynamically
    if (!window.mapboxgl) {
      await loadMapboxScript();
    }

    mapboxgl.accessToken = MAPBOX_TOKEN;

    map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/streets-v12',
      center: [-98.5795, 39.8283], // Center of USA
      zoom: 3.5
    });

    // Add navigation controls
    map.addControl(new mapboxgl.NavigationControl(), 'top-right');
    
    // Add fullscreen control
    map.addControl(new mapboxgl.FullscreenControl(), 'top-right');

    map.on('load', function() {
      // Hide loading state
      document.getElementById('map-loading').style.display = 'none';
      
      // Add piano markers
      addMarkersToMap();
    });

    map.on('error', function(e) {
      console.error('Map error:', e);
      showMapError();
    });
  }

  // Load Mapbox GL JS script dynamically
  function loadMapboxScript() {
    return new Promise((resolve, reject) => {
      if (window.mapboxgl) {
        resolve();
        return;
      }

      // Load CSS
      const css = document.createElement('link');
      css.rel = 'stylesheet';
      css.href = 'https://api.mapbox.com/mapbox-gl-js/v3.0.1/mapbox-gl.css';
      document.head.appendChild(css);

      // Load JavaScript
      const script = document.createElement('script');
      script.src = 'https://api.mapbox.com/mapbox-gl-js/v3.0.1/mapbox-gl.js';
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  // Add markers to map
  function addMarkersToMap() {
    // Clear existing markers
    markers.forEach(marker => marker.remove());
    markers = [];

    console.log('Adding markers for', filteredData.length, 'pianos');
    
    filteredData.forEach(piano => {
      const el = document.createElement('div');
      el.className = `piano-marker ${piano.properties.hasArtwork ? 'has-artwork' : 'no-artwork'}`;
      el.setAttribute('role', 'button');
      el.setAttribute('tabindex', '0');
      el.setAttribute('aria-label', `Piano: ${piano.properties.title} in ${piano.properties.city}`);

      // Add click/keyboard event listeners
      el.addEventListener('click', () => openPianoDrawerById(piano.properties.id));
      el.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          openPianoDrawerById(piano.properties.id);
        }
      });

      const marker = new mapboxgl.Marker(el)
        .setLngLat(piano.geometry.coordinates)
        .addTo(map);

      markers.push(marker);
    });
  }

  // Setup event listeners
  function setupEventListeners() {
    // View toggle buttons
    const mapViewBtn = document.getElementById('map-view-btn');
    const feedViewBtn = document.getElementById('feed-view-btn');

    mapViewBtn.addEventListener('click', () => switchView('map'));
    feedViewBtn.addEventListener('click', () => switchView('feed'));

    // Filter controls
    const searchInput = document.getElementById('search-input');
    const yearFilter = document.getElementById('year-filter');
    const programFilter = document.getElementById('program-filter');
    const artworkFilter = document.getElementById('artwork-filter');

    searchInput.addEventListener('input', debounce(filterAndDisplayData, 300));
    yearFilter.addEventListener('change', filterAndDisplayData);
    programFilter.addEventListener('change', filterAndDisplayData);
    artworkFilter.addEventListener('change', filterAndDisplayData);

    // Clear filters
    document.getElementById('clear-filters').addEventListener('click', clearAllFilters);

    // Drawer controls
    document.getElementById('close-drawer').addEventListener('click', closePianoDrawer);
    document.getElementById('drawer-overlay').addEventListener('click', closePianoDrawer);

    // Keyboard navigation for drawer
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && selectedPiano) {
        closePianoDrawer();
      }
    });
  }

  // Switch between map and feed views
  function switchView(view) {
    currentView = view;
    
    const mapContainer = document.getElementById('map-container');
    const feedContainer = document.getElementById('feed-container');
    const mapViewBtn = document.getElementById('map-view-btn');
    const feedViewBtn = document.getElementById('feed-view-btn');

    if (view === 'map') {
      mapContainer.classList.remove('hidden');
      feedContainer.classList.add('hidden');
      
      mapViewBtn.classList.add('bg-melody', 'text-white');
      mapViewBtn.classList.remove('bg-white', 'text-gray-700', 'border');
      mapViewBtn.setAttribute('aria-pressed', 'true');
      
      feedViewBtn.classList.remove('bg-melody', 'text-white');
      feedViewBtn.classList.add('bg-white', 'text-gray-700', 'border', 'border-gray-300');
      feedViewBtn.setAttribute('aria-pressed', 'false');
      
      // Resize map after showing
      if (map) {
        setTimeout(() => map.resize(), 100);
      }
    } else {
      mapContainer.classList.add('hidden');
      feedContainer.classList.remove('hidden');
      
      feedViewBtn.classList.add('bg-melody', 'text-white');
      feedViewBtn.classList.remove('bg-white', 'text-gray-700', 'border');
      feedViewBtn.setAttribute('aria-pressed', 'true');
      
      mapViewBtn.classList.remove('bg-melody', 'text-white');
      mapViewBtn.classList.add('bg-white', 'text-gray-700', 'border', 'border-gray-300');
      mapViewBtn.setAttribute('aria-pressed', 'false');
      
      // Render feed view
      renderFeedView();
    }
  }

  // Filter and display data based on current filters
  function filterAndDisplayData() {
    const searchTerm = document.getElementById('search-input').value.toLowerCase();
    const yearFilter = document.getElementById('year-filter').value;
    const programFilter = document.getElementById('program-filter').value;
    const artworkFilter = document.getElementById('artwork-filter').value;

    filteredData = pianoData.filter(piano => {
      const props = piano.properties;
      
      // Search filter
      if (searchTerm) {
        const searchableText = `${props.title} ${props.city} ${props.artist}`.toLowerCase();
        if (!searchableText.includes(searchTerm)) return false;
      }
      
      // Year filter
      if (yearFilter && props.year.toString() !== yearFilter) return false;
      
      // Program filter
      if (programFilter && props.program !== programFilter) return false;
      
      // Artwork filter
      if (artworkFilter && props.hasArtwork.toString() !== artworkFilter) return false;
      
      return true;
    });

    // Update UI
    updateResultsCount();
    updateActiveFilters();
    
    if (currentView === 'map' && map) {
      addMarkersToMap();
    } else if (currentView === 'feed') {
      renderFeedView();
    }
  }

  // Update results counter
  function updateResultsCount() {
    const count = filteredData.length;
    const countElement = document.getElementById('results-count');
    countElement.textContent = `${count} piano${count !== 1 ? 's' : ''}`;
  }

  // Update active filters display
  function updateActiveFilters() {
    const activeFiltersDiv = document.getElementById('active-filters');
    const filterTagsDiv = document.getElementById('filter-tags');
    
    const filters = [];
    
    const searchTerm = document.getElementById('search-input').value;
    if (searchTerm) filters.push({ type: 'search', value: searchTerm, label: `Search: "${searchTerm}"` });
    
    const yearFilter = document.getElementById('year-filter').value;
    if (yearFilter) filters.push({ type: 'year', value: yearFilter, label: `Year: ${yearFilter}` });
    
    const programFilter = document.getElementById('program-filter').value;
    if (programFilter) filters.push({ type: 'program', value: programFilter, label: `Program: ${programFilter}` });
    
    const artworkFilter = document.getElementById('artwork-filter').value;
    if (artworkFilter) {
      const label = artworkFilter === 'true' ? 'With Artwork' : 'Awaiting Artwork';
      filters.push({ type: 'artwork', value: artworkFilter, label });
    }

    if (filters.length > 0) {
      activeFiltersDiv.classList.remove('hidden');
      filterTagsDiv.innerHTML = filters.map(filter => `
        <span class="filter-tag">
          ${filter.label}
          <button onclick="removeFilter('${filter.type}')" aria-label="Remove ${filter.label} filter">×</button>
        </span>
      `).join('');
    } else {
      activeFiltersDiv.classList.add('hidden');
    }
  }

  // Remove specific filter
  window.removeFilter = function(filterType) {
    switch (filterType) {
      case 'search':
        document.getElementById('search-input').value = '';
        break;
      case 'year':
        document.getElementById('year-filter').value = '';
        break;
      case 'program':
        document.getElementById('program-filter').value = '';
        break;
      case 'artwork':
        document.getElementById('artwork-filter').value = '';
        break;
    }
    filterAndDisplayData();
  };

  // Clear all filters
  function clearAllFilters() {
    document.getElementById('search-input').value = '';
    document.getElementById('year-filter').value = '';
    document.getElementById('program-filter').value = '';
    document.getElementById('artwork-filter').value = '';
    filterAndDisplayData();
  }

  // Render feed view
  function renderFeedView() {
    const gridElement = document.getElementById('piano-grid');
    const emptyStateElement = document.getElementById('empty-state');

    if (filteredData.length === 0) {
      gridElement.innerHTML = '';
      emptyStateElement.classList.remove('hidden');
      return;
    }

    emptyStateElement.classList.add('hidden');

    gridElement.innerHTML = filteredData.map(piano => {
      const props = piano.properties;
      return `
        <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-200 cursor-pointer group"
             data-piano-id="${props.id}"
             onclick="openPianoDrawerById('${props.id}')"
             tabindex="0"
             onkeydown="if(event.key === 'Enter' || event.key === ' ') { event.preventDefault(); openPianoDrawerById('${props.id}'); }"
             role="button"
             aria-label="View details for ${props.title} in ${props.city}">
          ${props.thumbnail ? `
            <img src="${props.thumbnail}" alt="${props.title}" class="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-200">
          ` : `
            <div class="w-full h-48 bg-gray-100 flex items-center justify-center">
              <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"></path>
              </svg>
            </div>
          `}
          <div class="p-4">
            <div class="flex items-start justify-between mb-2">
              <h3 class="text-lg font-semibold text-gray-900 group-hover:text-melody transition-colors">${props.title}</h3>
              <div class="flex items-center">
                <div class="w-3 h-3 rounded-full ${props.hasArtwork ? 'bg-sonata' : 'bg-gray-300'}" 
                     title="${props.hasArtwork ? 'Has artwork' : 'Awaiting artwork'}"></div>
              </div>
            </div>
            <p class="text-sm text-gray-600 mb-1">
              <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
              </svg>
              ${props.city}${props.state ? `, ${props.state}` : ''}, ${props.country}
            </p>
            <p class="text-sm text-gray-500 mb-2">${props.program} • ${props.year}</p>
            <p class="text-sm text-gray-700 line-clamp-2">${props.description}</p>
            <div class="mt-3">
              <div class="flex flex-wrap gap-1">
                ${props.tags.slice(0, 3).map(tag => `
                  <span class="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-full">${tag}</span>
                `).join('')}
                ${props.tags.length > 3 ? `<span class="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-full">+${props.tags.length - 3}</span>` : ''}
              </div>
            </div>
          </div>
        </div>
      `;
    }).join('');
  }

  // Helper function to find piano by ID
  function findPianoById(id) {
    return pianoData.find(p => p.properties.id === id);
  }

  // Open piano detail drawer by ID
  window.openPianoDrawerById = function(pianoId) {
    const piano = findPianoById(pianoId);
    if (!piano) return;
    openPianoDrawer(piano);
  };

  // Open piano detail drawer
  function openPianoDrawer(piano) {
    selectedPiano = piano;
    const props = piano.properties;
    
    const drawer = document.getElementById('piano-drawer');
    const overlay = document.getElementById('drawer-overlay');
    const content = document.getElementById('drawer-content');
    
    // Set drawer content
    content.innerHTML = `
      <div class="p-6">
        ${props.thumbnail ? `
          <img src="${props.thumbnail}" alt="${props.title}" class="w-full h-64 object-cover rounded-lg mb-4">
        ` : `
          <div class="w-full h-64 bg-gray-100 rounded-lg mb-4 flex items-center justify-center">
            <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"></path>
            </svg>
          </div>
        `}
        
        <div class="mb-4">
          <div class="flex items-start justify-between mb-2">
            <h3 class="text-xl font-bold text-gray-900">${props.title}</h3>
            <div class="flex items-center">
              <div class="w-3 h-3 rounded-full mr-2 ${props.hasArtwork ? 'bg-sonata' : 'bg-gray-300'}"></div>
              <span class="text-sm text-gray-500">${props.hasArtwork ? 'Completed' : 'In Progress'}</span>
            </div>
          </div>
          
          <div class="space-y-2 text-sm text-gray-600 mb-4">
            <p class="flex items-center">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
              </svg>
              ${props.city}${props.state ? `, ${props.state}` : ''}, ${props.country}
            </p>
            <p class="flex items-center">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              ${props.year}
            </p>
            <p class="flex items-center">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
              </svg>
              ${props.program}
            </p>
            ${props.artist && props.artist !== 'Unknown' ? `
              <p class="flex items-center">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                ${props.artist}
              </p>
            ` : ''}
          </div>
          
          <p class="text-gray-700 mb-4">${props.description}</p>
          
          <div class="mb-6">
            <h4 class="text-sm font-medium text-gray-900 mb-2">Tags</h4>
            <div class="flex flex-wrap gap-2">
              ${props.tags.map(tag => `
                <span class="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-full">${tag}</span>
              `).join('')}
            </div>
          </div>
          
          <div class="flex space-x-3">
            <button onclick="centerMapOnPianoById('${props.id}')" class="flex-1 btn-melody text-center">
              <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"></path>
              </svg>
              View on Map
            </button>
            <button onclick="sharePiano('${props.id}')" class="flex-1 btn-outline text-center">
              <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
              </svg>
              Share
            </button>
          </div>
        </div>
      </div>
    `;
    
    // Show drawer with animation
    drawer.classList.remove('translate-x-full');
    overlay.classList.remove('opacity-0', 'pointer-events-none');
    
    // Focus management
    document.getElementById('close-drawer').focus();
  };

  // Close piano drawer
  function closePianoDrawer() {
    selectedPiano = null;
    
    const drawer = document.getElementById('piano-drawer');
    const overlay = document.getElementById('drawer-overlay');
    
    drawer.classList.add('translate-x-full');
    overlay.classList.add('opacity-0', 'pointer-events-none');
  }

  // Center map on piano location by ID
  window.centerMapOnPianoById = function(pianoId) {
    const piano = findPianoById(pianoId);
    if (!piano) return;
    
    if (currentView !== 'map') {
      switchView('map');
    }
    
    if (map) {
      map.flyTo({
        center: piano.geometry.coordinates,
        zoom: 12,
        duration: 2000
      });
    }
    
    closePianoDrawer();
  };

  // Share piano functionality
  window.sharePiano = function(pianoId) {
    const url = `${window.location.origin}/explore?piano=${pianoId}`;
    
    if (navigator.share) {
      navigator.share({
        title: 'Sing for Hope Piano',
        text: `Check out this Sing for Hope Piano!`,
        url: url
      });
    } else {
      // Fallback to clipboard
      navigator.clipboard.writeText(url).then(() => {
        // Show toast notification
        showToast('Link copied to clipboard!');
      });
    }
  };

  // Show toast notification
  function showToast(message) {
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 right-4 bg-gray-900 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform translate-y-full opacity-0 transition-all duration-300';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    // Animate in
    setTimeout(() => {
      toast.classList.remove('translate-y-full', 'opacity-0');
    }, 100);
    
    // Remove after 3 seconds
    setTimeout(() => {
      toast.classList.add('translate-y-full', 'opacity-0');
      setTimeout(() => document.body.removeChild(toast), 300);
    }, 3000);
  }

  // Show error states
  function showErrorState() {
    const mapContainer = document.getElementById('map');
    mapContainer.innerHTML = `
      <div class="flex items-center justify-center h-full bg-gray-50">
        <div class="text-center">
          <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <h3 class="text-lg font-medium text-gray-900 mb-2">Unable to load map</h3>
          <p class="text-sm text-gray-500 mb-4">There was an error loading the interactive map. Please try refreshing the page.</p>
          <button onclick="location.reload()" class="btn-melody">
            Refresh Page
          </button>
        </div>
      </div>
    `;
  }

  function showMapError() {
    document.getElementById('map-loading').innerHTML = `
      <div class="text-center">
        <svg class="mx-auto h-8 w-8 text-red-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <p class="text-sm text-red-600">Map failed to load</p>
      </div>
    `;
  }

  // Utility function for debouncing
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // Handle deep linking to specific piano
  function handleDeepLink() {
    const params = new URLSearchParams(window.location.search);
    const pianoId = params.get('piano');
    
    if (pianoId) {
      const piano = pianoData.find(p => p.properties.id === pianoId);
      if (piano) {
        setTimeout(() => {
          openPianoDrawer(piano);
          centerMapOnPiano(piano.geometry.coordinates);
        }, 1000);
      }
    }
  }
</script>