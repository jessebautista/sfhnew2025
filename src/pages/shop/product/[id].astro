import Base from '../../../layouts/Base.astro';
import { Heart, Share2, ShoppingCart, Truck, Award, Shield, ArrowLeft } from 'lucide-react';

const { id } = Astro.params;

const toUSD = (cents: number) => new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(cents / 100);

// Fetch product details from our API (server-side)
let product: any = null;
let error: string | null = null;
try {
  const res = await fetch(`${Astro.site ? Astro.site.origin : ''}/api/products/${id}`);
  if (res.ok) {
    const json = await res.json();
    if (json.success && json.data) {
      const p = json.data;
      // Normalize to template-friendly structure
      const sizes = Array.from(new Set((p.variants || []).map((v: any) => v.size).filter(Boolean)));
      const colors = Array.from(new Set((p.variants || []).map((v: any) => v.color).filter(Boolean)));
      const variants = (p.variants || []).map((v: any) => ({
        id: v.id,
        size: v.size || 'One Size',
        color: v.color || 'Default',
        inStock: (v.availability || '').toLowerCase() !== 'out_of_stock'
      }));
      product = {
        id: p.id,
        name: p.name,
        price: p.price,
        originalPrice: undefined,
        description: p.description || '',
        longDescription: p.description || '',
        images: p.images && p.images.length ? p.images : [p.image],
        variants,
        colors: colors.length ? colors : ['Default'],
        sizes: sizes.length ? sizes : ['One Size'],
        rating: 4.8,
        reviewCount: 100,
        category: 'Product',
        tags: [],
        artist: 'Sing for Hope',
        specs: {},
        shipping: {
          standard: 'Free shipping on orders over $50',
          express: '$9.99 - 2-3 business days',
          overnight: '$19.99 - 1 business day'
        }
      };
    } else {
      error = 'Product not found';
    }
  } else {
    error = `Failed to fetch product (${res.status})`;
  }
} catch (e) {
  error = 'Failed to load product';
}

if (!product) {
  return new Response(JSON.stringify({ error: error || 'Not found' }), { status: 404 });
}

const formatPrice = toUSD;
---

<Base
  title={`${product.name} - Sing for Hope Shop`}
  description={product.description}
>
  <div class="min-h-screen bg-gray-50">
    <!-- Breadcrumb -->
    <div class="bg-white border-b">
      <div class="max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8">
        <nav class="flex" aria-label="Breadcrumb">
          <ol class="flex items-center space-x-4">
            <li>
              <a href="/" class="text-gray-400 hover:text-gray-500">Home</a>
            </li>
            <li>
              <div class="flex items-center">
                <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M5.555 17.776l8-16 .894.448-8 16-.894-.448z" />
                </svg>
                <a href="/shop" class="ml-4 text-gray-400 hover:text-gray-500">Shop</a>
              </div>
            </li>
            <li>
              <div class="flex items-center">
                <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M5.555 17.776l8-16 .894.448-8 16-.894-.448z" />
                </svg>
                <a href={`/shop/category/${product.category.toLowerCase()}`} class="ml-4 text-gray-400 hover:text-gray-500">{product.category}</a>
              </div>
            </li>
            <li>
              <div class="flex items-center">
                <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M5.555 17.776l8-16 .894.448-8 16-.894-.448z" />
                </svg>
                <span class="ml-4 text-gray-900 font-medium">{product.name}</span>
              </div>
            </li>
          </ol>
        </nav>
      </div>
    </div>

    <!-- Back Button -->
    <div class="max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8">
      <button onclick="history.back()" class="inline-flex items-center text-gray-600 hover:text-gray-900 transition-colors">
        <ArrowLeft className="w-4 h-4 mr-2" />
        Back to Products
      </button>
    </div>

    <!-- Product Details -->
    <div class="max-w-7xl mx-auto px-4 py-8 sm:px-6 lg:px-8">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
        <!-- Product Images -->
        <div class="space-y-4">
          <div class="aspect-square bg-white rounded-2xl shadow-sm overflow-hidden">
            <img
              id="main-image"
              src={product.images[0]}
              alt={product.name}
              class="w-full h-full object-cover"
            />
          </div>
          
          <!-- Thumbnail Images -->
          <div class="grid grid-cols-4 gap-4">
            {product.images.map((image, index) => (
              <button 
                class="aspect-square bg-white rounded-lg shadow-sm overflow-hidden border-2 border-transparent hover:border-harmony transition-colors"
                onclick={`document.getElementById('main-image').src = '${image}'`}
              >
                <img
                  src={image}
                  alt={`${product.name} view ${index + 1}`}
                  class="w-full h-full object-cover"
                />
              </button>
            ))}
          </div>
        </div>

        <!-- Product Info -->
        <div class="space-y-6">
          <div>
            <div class="flex items-center justify-between mb-2">
              <h1 class="text-3xl font-bold text-gray-900">{product.name}</h1>
              <button class="p-2 text-gray-400 hover:text-red-500 transition-colors">
                <Heart className="w-6 h-6" />
              </button>
            </div>
            
            <div class="flex items-center space-x-4 mb-4">
              <div class="flex items-center">
                <div class="flex text-yellow-400">
                  {Array.from({ length: 5 }).map((_, i) => (
                    <svg class={`w-4 h-4 ${i < Math.floor(product.rating) ? 'fill-current' : 'fill-none stroke-current'}`} viewBox="0 0 24 24">
                      <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                    </svg>
                  ))}
                </div>
                <span class="ml-2 text-sm text-gray-600">
                  {product.rating} ({product.reviewCount} reviews)
                </span>
              </div>
            </div>

            <div class="flex items-center space-x-4 mb-6">
              <span id="price-amount" class="text-3xl font-bold text-gray-900">
                {formatPrice(product.price)}
              </span>
              {product.originalPrice && product.originalPrice > product.price && (
                <span class="text-xl text-gray-500 line-through">
                  {formatPrice(product.originalPrice)}
                </span>
              )}
            </div>

            <p class="text-gray-600 leading-relaxed">
              {product.description}
            </p>
          </div>

          <!-- Product Options -->
          <div class="space-y-6">
            <!-- Color Selection -->
            <div>
              <h3 class="text-sm font-medium text-gray-900 mb-3">Color</h3>
              <div id="color-options" class="flex space-x-3">
                {product.colors.map((color) => (
                  <button 
                    class="color-option w-8 h-8 rounded-full border-2 border-gray-300 focus:outline-none"
                    style={`background-color: ${color.toLowerCase()}`}
                    title={color}
                    data-color={color}
                    aria-label={`Color ${color}`}
                  />
                ))}
              </div>
            </div>

            <!-- Size Selection -->
            <div>
              <div class="flex items-center justify-between mb-3">
                <h3 class="text-sm font-medium text-gray-900">Size</h3>
                <button class="text-sm text-harmony hover:underline">Size Guide</button>
              </div>
              <div id="size-options" class="grid grid-cols-3 gap-2">
                {product.sizes.map((size) => (
                  <button class="size-option py-3 px-4 text-sm border border-gray-300 rounded-lg hover:border-harmony hover:text-harmony focus:outline-none transition-colors" data-size={size}>
                    {size}
                  </button>
                ))}
              </div>
            </div>

            <!-- Quantity -->
            <div>
              <h3 class="text-sm font-medium text-gray-900 mb-3">Quantity</h3>
              <div class="flex items-center space-x-3">
                <button class="w-10 h-10 border border-gray-300 rounded-lg flex items-center justify-center hover:bg-gray-50">
                  -
                </button>
                <span class="w-12 text-center">1</span>
                <button class="w-10 h-10 border border-gray-300 rounded-lg flex items-center justify-center hover:bg-gray-50">
                  +
                </button>
              </div>
            </div>
          </div>

          <!-- Action Buttons -->
          <div class="space-y-4">
            <button id="add-to-cart-btn" class="w-full btn-harmony py-4 text-lg">
              <ShoppingCart className="w-5 h-5 mr-2" />
              Add to Cart
            </button>
            
            <div class="flex space-x-4">
              <button class="flex-1 btn-outline-harmony py-3">
                Buy Now
              </button>
              <button class="px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                <Share2 className="w-5 h-5" />
              </button>
            </div>

            <!-- Shipping Estimate -->
            <div class="mt-6 p-4 bg-gray-50 rounded-lg">
              <div class="flex items-center justify-between mb-3">
                <h3 class="text-sm font-medium text-gray-900">Shipping Estimate</h3>
                <span id="ship-amount" class="text-sm font-semibold text-green-700">—</span>
              </div>
              <div class="flex items-center space-x-2">
                <input id="ship-zip" placeholder="ZIP" class="w-28 px-3 py-2 text-sm border rounded" />
                <select id="ship-country" class="px-3 py-2 text-sm border rounded">
                  <option value="US">US</option>
                  <option value="CA">CA</option>
                  <option value="GB">GB</option>
                  <option value="AU">AU</option>
                  <option value="DE">DE</option>
                  <option value="FR">FR</option>
                </select>
                <button id="ship-estimate-btn" class="text-sm text-harmony hover:underline">Estimate</button>
              </div>
              <div id="ship-error" class="text-xs text-red-600 mt-2 hidden"></div>
            </div>
          </div>

          <!-- Shipping Info -->
          <div class="border-t pt-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Shipping & Returns</h3>
            <div class="space-y-3 text-sm">
              <div class="flex items-center">
                <Truck className="w-5 h-5 text-green-600 mr-3" />
                <span>{product.shipping.standard}</span>
              </div>
              <div class="flex items-center">
                <Award className="w-5 h-5 text-harmony mr-3" />
                <span>30-day hassle-free returns</span>
              </div>
              <div class="flex items-center">
                <Shield className="w-5 h-5 text-blue-600 mr-3" />
                <span>Secure payment processing</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Product Tabs -->
      <div class="mt-16">
        <div class="border-b border-gray-200">
          <nav class="-mb-px flex space-x-8">
            <button class="tab-btn active py-4 px-1 border-b-2 border-harmony font-medium text-sm text-harmony" data-tab="description">
              Description
            </button>
            <button class="tab-btn py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300" data-tab="specifications">
              Specifications
            </button>
            <button class="tab-btn py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300" data-tab="shipping">
              Shipping
            </button>
            <button class="tab-btn py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300" data-tab="reviews">
              Reviews ({product.reviewCount})
            </button>
          </nav>
        </div>

        <div class="py-8">
          <!-- Description Tab -->
          <div id="description" class="tab-content">
            <div class="prose max-w-none">
              <h3 class="text-lg font-medium text-gray-900 mb-4">About This Product</h3>
              <div class="text-gray-600 leading-relaxed whitespace-pre-line">
                {product.longDescription}
              </div>
              
              <div class="mt-8 p-6 bg-harmony/5 rounded-xl">
                <h4 class="font-medium text-gray-900 mb-2">Impact Statement</h4>
                <p class="text-gray-600">
                  Your purchase of this item directly supports Sing for Hope's arts programs in communities, schools, and healthcare settings. 75% of proceeds fund program operations, artist stipends, and community partnerships.
                </p>
              </div>
            </div>
          </div>

          <!-- Specifications Tab -->
          <div id="specifications" class="tab-content hidden">
            <h3 class="text-lg font-medium text-gray-900 mb-6">Product Specifications</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              {Object.entries(product.specs).map(([key, value]) => (
                <div class="flex justify-between py-2 border-b border-gray-200">
                  <span class="font-medium text-gray-900">{key}:</span>
                  <span class="text-gray-600">{value}</span>
                </div>
              ))}
            </div>
          </div>

          <!-- Shipping Tab -->
          <div id="shipping" class="tab-content hidden">
            <h3 class="text-lg font-medium text-gray-900 mb-6">Shipping Information</h3>
            <div class="space-y-4">
              <div class="p-4 border rounded-lg">
                <h4 class="font-medium text-gray-900 mb-2">Standard Shipping</h4>
                <p class="text-gray-600">{product.shipping.standard}</p>
                <p class="text-sm text-gray-500 mt-1">5-7 business days</p>
              </div>
              <div class="p-4 border rounded-lg">
                <h4 class="font-medium text-gray-900 mb-2">Express Shipping</h4>
                <p class="text-gray-600">{product.shipping.express}</p>
              </div>
              <div class="p-4 border rounded-lg">
                <h4 class="font-medium text-gray-900 mb-2">Overnight Shipping</h4>
                <p class="text-gray-600">{product.shipping.overnight}</p>
              </div>
            </div>
          </div>

          <!-- Reviews Tab -->
          <div id="reviews" class="tab-content hidden">
            <div class="space-y-6">
              <div class="flex items-center justify-between">
                <h3 class="text-lg font-medium text-gray-900">Customer Reviews</h3>
                <button class="btn-outline-harmony">Write a Review</button>
              </div>
              
              <!-- Review Summary -->
              <div class="bg-gray-50 rounded-xl p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div class="text-center">
                    <div class="text-4xl font-bold text-gray-900 mb-2">{product.rating}</div>
                    <div class="flex justify-center mb-2">
                      <div class="flex text-yellow-400">
                        {Array.from({ length: 5 }).map((_, i) => (
                          <svg class={`w-5 h-5 ${i < Math.floor(product.rating) ? 'fill-current' : 'fill-none stroke-current'}`} viewBox="0 0 24 24">
                            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                          </svg>
                        ))}
                      </div>
                    </div>
                    <div class="text-sm text-gray-600">{product.reviewCount} reviews</div>
                  </div>
                  <div class="space-y-2">
                    {[5, 4, 3, 2, 1].map((stars) => (
                      <div class="flex items-center space-x-2">
                        <span class="text-sm text-gray-600 w-8">{stars}★</span>
                        <div class="flex-1 bg-gray-200 rounded-full h-2">
                          <div class="bg-yellow-400 h-2 rounded-full" style={`width: ${stars === 5 ? '78%' : stars === 4 ? '15%' : '4%'}`}></div>
                        </div>
                        <span class="text-sm text-gray-500 w-8">{stars === 5 ? '78%' : stars === 4 ? '15%' : '4%'}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              <!-- Sample Reviews -->
              <div class="space-y-6">
                <div class="border-b pb-6">
                  <div class="flex items-center space-x-4 mb-4">
                    <div class="w-10 h-10 bg-harmony rounded-full flex items-center justify-center">
                      <span class="text-white font-medium">JS</span>
                    </div>
                    <div>
                      <h4 class="font-medium text-gray-900">Jessica S.</h4>
                      <div class="flex items-center space-x-2">
                        <div class="flex text-yellow-400">
                          {Array.from({ length: 5 }).map((_, i) => (
                            <svg class="w-4 h-4 fill-current" viewBox="0 0 24 24">
                              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                            </svg>
                          ))}
                        </div>
                        <span class="text-sm text-gray-500">2 weeks ago</span>
                      </div>
                    </div>
                  </div>
                  <p class="text-gray-600">
                    Love this t-shirt! The quality is excellent and it feels great to support such a meaningful cause. The fit is perfect and the logo design is beautiful.
                  </p>
                </div>

                <div class="border-b pb-6">
                  <div class="flex items-center space-x-4 mb-4">
                    <div class="w-10 h-10 bg-melody rounded-full flex items-center justify-center">
                      <span class="text-white font-medium">MR</span>
                    </div>
                    <div>
                      <h4 class="font-medium text-gray-900">Mike R.</h4>
                      <div class="flex items-center space-x-2">
                        <div class="flex text-yellow-400">
                          {Array.from({ length: 4 }).map((_, i) => (
                            <svg class="w-4 h-4 fill-current" viewBox="0 0 24 24">
                              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                            </svg>
                          ))}
                        </div>
                        <span class="text-sm text-gray-500">1 month ago</span>
                      </div>
                    </div>
                  </div>
                  <p class="text-gray-600">
                    Great shirt, very comfortable and well-made. Ordered a medium and it fits true to size. Shipping was fast too!
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Base>

<script>
  // Variant selection, price updates, and add-to-cart (localStorage)
  const VARIANTS = JSON.parse(decodeURIComponent(`${encodeURIComponent(JSON.stringify(product.variants))}`));
  const BASE_PRICE = Number(`${product.price}`);
  const PRODUCT_META = {
    id: Number(`${product.id}`),
    name: `${product.name}`,
    image: `${product.images[0]}`
  };

  let selected = { color: null as string | null, size: null as string | null };

  const priceEl = document.getElementById('price-amount');
  const addBtn = document.getElementById('add-to-cart-btn') as HTMLButtonElement | null;

  function findVariant() {
    // prefer exact match (both size and color), then size-only, then color-only
    let v = VARIANTS.find((x: any) => x.size === selected.size && x.color === selected.color);
    if (!v && selected.size) v = VARIANTS.find((x: any) => x.size === selected.size && !x.color);
    if (!v && selected.color) v = VARIANTS.find((x: any) => x.color === selected.color && !x.size);
    return v || null;
  }

  function updatePriceAndButton() {
    const v = findVariant();
    const priceCents = (v && typeof v.price === 'number') ? v.price : BASE_PRICE;
    if (priceEl) priceEl.textContent = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(priceCents / 100);
    const out = v && typeof v.availability === 'string' && v.availability.toLowerCase() === 'out_of_stock';
    if (addBtn) addBtn.disabled = !!out;
  }

  function selectOption(type: 'color' | 'size', value: string) {
    selected[type] = value;
    // toggle active styles
    const clsOn = type === 'color' ? 'ring-2 ring-harmony border-harmony' : 'border-harmony text-harmony';
    const clsOff = 'border-gray-300';
    document.querySelectorAll(`.${type}-option`).forEach((el) => {
      const btn = el as HTMLElement;
      const isMatch = (btn.getAttribute(`data-${type}`) || '') === value;
      btn.classList.remove('ring-2','ring-harmony','border-harmony','text-harmony');
      if (isMatch) btn.classList.add(...clsOn.split(' ')); else btn.classList.add(...clsOff.split(' '));
    });
    updatePriceAndButton();
  }

  // Bind color buttons
  document.querySelectorAll('.color-option').forEach(btn => {
    btn.addEventListener('click', () => selectOption('color', (btn as HTMLElement).dataset.color || ''));
  });
  // Bind size buttons
  document.querySelectorAll('.size-option').forEach(btn => {
    btn.addEventListener('click', () => selectOption('size', (btn as HTMLElement).dataset.size || ''));
  });

  // Add to cart (localStorage) to sync with CartContext
  if (addBtn) {
    addBtn.addEventListener('click', () => {
      const v = findVariant();
      if (!v) {
        alert('Please select options before adding to cart.');
        return;
      }
      const key = 'sfh-cart';
      let items: any[] = [];
      try { items = JSON.parse(localStorage.getItem(key) || '[]'); } catch {}
      const idx = items.findIndex(it => it.id === PRODUCT_META.id && it.variantId === v.id);
      if (idx >= 0) items[idx].quantity += 1;
      else items.push({ id: PRODUCT_META.id, variantId: v.id, quantity: 1, size: v.size || 'One Size', color: v.color, price: (v.price || BASE_PRICE), name: PRODUCT_META.name, image: PRODUCT_META.image });
      localStorage.setItem(key, JSON.stringify(items));
      // Notify header/cart widgets
      window.dispatchEvent(new CustomEvent('cartUpdated'));
      // Optionally open/toggle cart drawer
      window.dispatchEvent(new Event('toggleCart'));
    });
  }

  // Shipping estimate on PDP
  const shipZip = document.getElementById('ship-zip') as HTMLInputElement | null;
  const shipCountry = document.getElementById('ship-country') as HTMLSelectElement | null;
  const shipBtn = document.getElementById('ship-estimate-btn') as HTMLButtonElement | null;
  const shipAmount = document.getElementById('ship-amount');
  const shipError = document.getElementById('ship-error');

  async function estimateShipPDP() {
    if (!shipZip || !shipCountry || !shipAmount) return;
    if (!findVariant()) {
      shipError?.classList.remove('hidden');
      if (shipError) shipError.textContent = 'Select size/color to estimate shipping.';
      return;
    }
    shipError?.classList.add('hidden');
    const v = findVariant();
    const payload = {
      country: shipCountry.value || 'US',
      zip: shipZip.value || '',
      items: [{ variant_id: Number(v.id), quantity: 1 }]
    };
    shipBtn && (shipBtn.disabled = true);
    try {
      const res = await fetch('/api/shipping/estimate', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
      const json = await res.json();
      if (json.success) {
        const cents = Number(json.data?.shipping_cents || 0);
        shipAmount.textContent = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(cents / 100);
      } else {
        shipError?.classList.remove('hidden');
        if (shipError) shipError.textContent = json.error || 'Failed to estimate.';
      }
    } catch (e) {
      shipError?.classList.remove('hidden');
      if (shipError) shipError.textContent = 'Failed to estimate.';
    } finally {
      shipBtn && (shipBtn.disabled = false);
    }
  }

  shipBtn?.addEventListener('click', estimateShipPDP);

  // Initial UI state
  updatePriceAndButton();
  // Tab functionality
  const tabButtons = document.querySelectorAll('.tab-btn');
  const tabContents = document.querySelectorAll('.tab-content');

  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      const targetTab = button.getAttribute('data-tab');
      
      // Remove active states
      tabButtons.forEach(btn => {
        btn.classList.remove('active', 'border-harmony', 'text-harmony');
        btn.classList.add('border-transparent', 'text-gray-500');
      });
      
      tabContents.forEach(content => {
        content.classList.add('hidden');
      });
      
      // Add active state to clicked button
      button.classList.add('active', 'border-harmony', 'text-harmony');
      button.classList.remove('border-transparent', 'text-gray-500');
      
      // Show target content
      if (targetTab) {
        const targetContent = document.getElementById(targetTab);
        if (targetContent) {
          targetContent.classList.remove('hidden');
        }
      }
    });
  });
</script>

<style>
  .tab-btn.active {
    @apply border-harmony text-harmony;
  }
</style>
